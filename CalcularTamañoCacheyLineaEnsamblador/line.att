
line:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

00000000004008c0 <_init>:
  4008c0:	48 83 ec 08          	sub    $0x8,%rsp
  4008c4:	48 8b 05 2d 17 20 00 	mov    0x20172d(%rip),%rax        # 601ff8 <_DYNAMIC+0x1e0>
  4008cb:	48 85 c0             	test   %rax,%rax
  4008ce:	74 05                	je     4008d5 <_init+0x15>
  4008d0:	e8 3b 00 00 00       	callq  400910 <__gmon_start__@plt>
  4008d5:	48 83 c4 08          	add    $0x8,%rsp
  4008d9:	c3                   	retq   

Desensamblado de la sección .plt:

00000000004008e0 <memset@plt-0x10>:
  4008e0:	ff 35 22 17 20 00    	pushq  0x201722(%rip)        # 602008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4008e6:	ff 25 24 17 20 00    	jmpq   *0x201724(%rip)        # 602010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4008ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004008f0 <memset@plt>:
  4008f0:	ff 25 22 17 20 00    	jmpq   *0x201722(%rip)        # 602018 <_GLOBAL_OFFSET_TABLE_+0x18>
  4008f6:	68 00 00 00 00       	pushq  $0x0
  4008fb:	e9 e0 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400900 <std::__throw_bad_cast()@plt>:
  400900:	ff 25 1a 17 20 00    	jmpq   *0x20171a(%rip)        # 602020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400906:	68 01 00 00 00       	pushq  $0x1
  40090b:	e9 d0 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400910 <__gmon_start__@plt>:
  400910:	ff 25 12 17 20 00    	jmpq   *0x201712(%rip)        # 602028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400916:	68 02 00 00 00       	pushq  $0x2
  40091b:	e9 c0 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400920 <std::ctype<char>::_M_widen_init() const@plt>:
  400920:	ff 25 0a 17 20 00    	jmpq   *0x20170a(%rip)        # 602030 <_GLOBAL_OFFSET_TABLE_+0x30>
  400926:	68 03 00 00 00       	pushq  $0x3
  40092b:	e9 b0 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400930 <std::ios_base::Init::Init()@plt>:
  400930:	ff 25 02 17 20 00    	jmpq   *0x201702(%rip)        # 602038 <_GLOBAL_OFFSET_TABLE_+0x38>
  400936:	68 04 00 00 00       	pushq  $0x4
  40093b:	e9 a0 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400940 <__libc_start_main@plt>:
  400940:	ff 25 fa 16 20 00    	jmpq   *0x2016fa(%rip)        # 602040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400946:	68 05 00 00 00       	pushq  $0x5
  40094b:	e9 90 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400950 <std::chrono::_V2::system_clock::now()@plt>:
  400950:	ff 25 f2 16 20 00    	jmpq   *0x2016f2(%rip)        # 602048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400956:	68 06 00 00 00       	pushq  $0x6
  40095b:	e9 80 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400960 <__cxa_atexit@plt>:
  400960:	ff 25 ea 16 20 00    	jmpq   *0x2016ea(%rip)        # 602050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400966:	68 07 00 00 00       	pushq  $0x7
  40096b:	e9 70 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400970 <std::ios_base::Init::~Init()@plt>:
  400970:	ff 25 e2 16 20 00    	jmpq   *0x2016e2(%rip)        # 602058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400976:	68 08 00 00 00       	pushq  $0x8
  40097b:	e9 60 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400980 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
  400980:	ff 25 da 16 20 00    	jmpq   *0x2016da(%rip)        # 602060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400986:	68 09 00 00 00       	pushq  $0x9
  40098b:	e9 50 ff ff ff       	jmpq   4008e0 <_init+0x20>

0000000000400990 <std::ostream::flush()@plt>:
  400990:	ff 25 d2 16 20 00    	jmpq   *0x2016d2(%rip)        # 602068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400996:	68 0a 00 00 00       	pushq  $0xa
  40099b:	e9 40 ff ff ff       	jmpq   4008e0 <_init+0x20>

00000000004009a0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>:
  4009a0:	ff 25 ca 16 20 00    	jmpq   *0x2016ca(%rip)        # 602070 <_GLOBAL_OFFSET_TABLE_+0x70>
  4009a6:	68 0b 00 00 00       	pushq  $0xb
  4009ab:	e9 30 ff ff ff       	jmpq   4008e0 <_init+0x20>

00000000004009b0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
  4009b0:	ff 25 c2 16 20 00    	jmpq   *0x2016c2(%rip)        # 602078 <_GLOBAL_OFFSET_TABLE_+0x78>
  4009b6:	68 0c 00 00 00       	pushq  $0xc
  4009bb:	e9 20 ff ff ff       	jmpq   4008e0 <_init+0x20>

00000000004009c0 <std::ostream::put(char)@plt>:
  4009c0:	ff 25 ba 16 20 00    	jmpq   *0x2016ba(%rip)        # 602080 <_GLOBAL_OFFSET_TABLE_+0x80>
  4009c6:	68 0d 00 00 00       	pushq  $0xd
  4009cb:	e9 10 ff ff ff       	jmpq   4008e0 <_init+0x20>

Desensamblado de la sección .text:

00000000004009d0 <main>:
  4009d0:	41 56                	push   %r14
  4009d2:	be 64 0d 40 00       	mov    $0x400d64,%esi
  4009d7:	bf a0 20 60 00       	mov    $0x6020a0,%edi
  4009dc:	41 55                	push   %r13
  4009de:	41 be 01 00 00 00    	mov    $0x1,%r14d
  4009e4:	41 bd 0b 00 00 00    	mov    $0xb,%r13d
  4009ea:	41 54                	push   %r12
  4009ec:	49 bc db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%r12
  4009f3:	de 1b 43 
  4009f6:	55                   	push   %rbp
  4009f7:	53                   	push   %rbx
  4009f8:	48 81 ec 90 01 00 00 	sub    $0x190,%rsp
  4009ff:	e8 7c ff ff ff       	callq  400980 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  400a04:	be 66 0d 40 00       	mov    $0x400d66,%esi
  400a09:	48 8b 10             	mov    (%rax),%rdx
  400a0c:	48 89 c7             	mov    %rax,%rdi
  400a0f:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  400a13:	48 c7 44 10 10 0b 00 	movq   $0xb,0x10(%rax,%rdx,1)
  400a1a:	00 00 
  400a1c:	e8 5f ff ff ff       	callq  400980 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  400a21:	be 6f 0d 40 00       	mov    $0x400d6f,%esi
  400a26:	48 8b 10             	mov    (%rax),%rdx
  400a29:	48 89 c7             	mov    %rax,%rdi
  400a2c:	48 8b 52 e8          	mov    -0x18(%rdx),%rdx
  400a30:	48 c7 44 10 10 0c 00 	movq   $0xc,0x10(%rax,%rdx,1)
  400a37:	00 00 
  400a39:	e8 42 ff ff ff       	callq  400980 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
  400a3e:	48 89 c7             	mov    %rax,%rdi
  400a41:	e8 6a ff ff ff       	callq  4009b0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
  400a46:	ba 00 00 00 04       	mov    $0x4000000,%edx
  400a4b:	31 f6                	xor    %esi,%esi
  400a4d:	bf c0 21 60 00       	mov    $0x6021c0,%edi
  400a52:	e8 99 fe ff ff       	callq  4008f0 <memset@plt>
  400a57:	48 89 e3             	mov    %rsp,%rbx
  400a5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  400a60:	e8 eb fe ff ff       	callq  400950 <std::chrono::_V2::system_clock::now()@plt>
  400a65:	31 d2                	xor    %edx,%edx
  400a67:	48 89 c5             	mov    %rax,%rbp
  400a6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  400a70:	89 d1                	mov    %edx,%ecx
  400a72:	44 01 f2             	add    %r14d,%edx
  400a75:	83 0c 8d c0 21 60 00 	orl    $0x1,0x6021c0(,%rcx,4)
  400a7c:	01 
  400a7d:	81 fa ff ff ff 00    	cmp    $0xffffff,%edx
  400a83:	76 eb                	jbe    400a70 <main+0xa0>
  400a85:	e8 c6 fe ff ff       	callq  400950 <std::chrono::_V2::system_clock::now()@plt>
  400a8a:	48 83 c3 04          	add    $0x4,%rbx
  400a8e:	48 89 c1             	mov    %rax,%rcx
  400a91:	48 29 e9             	sub    %rbp,%rcx
  400a94:	48 89 c8             	mov    %rcx,%rax
  400a97:	48 c1 f9 3f          	sar    $0x3f,%rcx
  400a9b:	49 f7 ec             	imul   %r12
  400a9e:	48 8d 84 24 90 01 00 	lea    0x190(%rsp),%rax
  400aa5:	00 
  400aa6:	48 c1 fa 12          	sar    $0x12,%rdx
  400aaa:	48 29 ca             	sub    %rcx,%rdx
  400aad:	89 53 fc             	mov    %edx,-0x4(%rbx)
  400ab0:	48 39 d8             	cmp    %rbx,%rax
  400ab3:	75 ab                	jne    400a60 <main+0x90>
  400ab5:	48 8b 05 e4 15 20 00 	mov    0x2015e4(%rip),%rax        # 6020a0 <std::cout@@GLIBCXX_3.4>
  400abc:	44 89 f6             	mov    %r14d,%esi
  400abf:	bf a0 20 60 00       	mov    $0x6020a0,%edi
  400ac4:	48 c1 e6 02          	shl    $0x2,%rsi
  400ac8:	8b 1c 24             	mov    (%rsp),%ebx
  400acb:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  400acf:	48 c7 80 b0 20 60 00 	movq   $0xc,0x6020b0(%rax)
  400ad6:	0c 00 00 00 
  400ada:	e8 c1 fe ff ff       	callq  4009a0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
  400adf:	48 8b 08             	mov    (%rax),%rcx
  400ae2:	48 89 c6             	mov    %rax,%rsi
  400ae5:	48 89 c7             	mov    %rax,%rdi
  400ae8:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
  400aec:	48 c7 44 10 10 0c 00 	movq   $0xc,0x10(%rax,%rdx,1)
  400af3:	00 00 
  400af5:	48 03 71 e8          	add    -0x18(%rcx),%rsi
  400af9:	8b 56 18             	mov    0x18(%rsi),%edx
  400afc:	48 c7 46 08 01 00 00 	movq   $0x1,0x8(%rsi)
  400b03:	00 
  400b04:	81 e2 fb fe ff ff    	and    $0xfffffefb,%edx
  400b0a:	83 ca 04             	or     $0x4,%edx
  400b0d:	89 56 18             	mov    %edx,0x18(%rsi)
  400b10:	48 8b 51 e8          	mov    -0x18(%rcx),%rdx
  400b14:	48 89 de             	mov    %rbx,%rsi
  400b17:	48 c7 44 10 10 0c 00 	movq   $0xc,0x10(%rax,%rdx,1)
  400b1e:	00 00 
  400b20:	e8 7b fe ff ff       	callq  4009a0 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
  400b25:	48 89 c5             	mov    %rax,%rbp
  400b28:	48 8b 00             	mov    (%rax),%rax
  400b2b:	48 8b 40 e8          	mov    -0x18(%rax),%rax
  400b2f:	48 8b 9c 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbx
  400b36:	00 
  400b37:	48 85 db             	test   %rbx,%rbx
  400b3a:	74 64                	je     400ba0 <main+0x1d0>
  400b3c:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
  400b40:	74 46                	je     400b88 <main+0x1b8>
  400b42:	0f b6 43 43          	movzbl 0x43(%rbx),%eax
  400b46:	0f be f0             	movsbl %al,%esi
  400b49:	48 89 ef             	mov    %rbp,%rdi
  400b4c:	45 01 f6             	add    %r14d,%r14d
  400b4f:	e8 6c fe ff ff       	callq  4009c0 <std::ostream::put(char)@plt>
  400b54:	48 89 c7             	mov    %rax,%rdi
  400b57:	e8 34 fe ff ff       	callq  400990 <std::ostream::flush()@plt>
  400b5c:	41 83 ed 01          	sub    $0x1,%r13d
  400b60:	0f 85 f1 fe ff ff    	jne    400a57 <main+0x87>
  400b66:	a1 bc 21 60 04 00 00 	movabs 0x46021bc,%eax
  400b6d:	00 00 
  400b6f:	03 05 4b 16 20 00    	add    0x20164b(%rip),%eax        # 6021c0 <bytes>
  400b75:	48 81 c4 90 01 00 00 	add    $0x190,%rsp
  400b7c:	5b                   	pop    %rbx
  400b7d:	5d                   	pop    %rbp
  400b7e:	41 5c                	pop    %r12
  400b80:	41 5d                	pop    %r13
  400b82:	41 5e                	pop    %r14
  400b84:	c3                   	retq   
  400b85:	0f 1f 00             	nopl   (%rax)
  400b88:	48 89 df             	mov    %rbx,%rdi
  400b8b:	e8 90 fd ff ff       	callq  400920 <std::ctype<char>::_M_widen_init() const@plt>
  400b90:	48 8b 03             	mov    (%rbx),%rax
  400b93:	be 0a 00 00 00       	mov    $0xa,%esi
  400b98:	48 89 df             	mov    %rbx,%rdi
  400b9b:	ff 50 30             	callq  *0x30(%rax)
  400b9e:	eb a6                	jmp    400b46 <main+0x176>
  400ba0:	e8 5b fd ff ff       	callq  400900 <std::__throw_bad_cast()@plt>
  400ba5:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  400bac:	00 00 00 00 

0000000000400bb0 <_GLOBAL__sub_I_bytes>:
  400bb0:	48 83 ec 08          	sub    $0x8,%rsp
  400bb4:	bf c0 21 60 04       	mov    $0x46021c0,%edi
  400bb9:	e8 72 fd ff ff       	callq  400930 <std::ios_base::Init::Init()@plt>
  400bbe:	ba 90 20 60 00       	mov    $0x602090,%edx
  400bc3:	be c0 21 60 04       	mov    $0x46021c0,%esi
  400bc8:	bf 70 09 40 00       	mov    $0x400970,%edi
  400bcd:	48 83 c4 08          	add    $0x8,%rsp
  400bd1:	e9 8a fd ff ff       	jmpq   400960 <__cxa_atexit@plt>
  400bd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400bdd:	00 00 00 

0000000000400be0 <set_fast_math>:
  400be0:	0f ae 5c 24 fc       	stmxcsr -0x4(%rsp)
  400be5:	81 4c 24 fc 40 80 00 	orl    $0x8040,-0x4(%rsp)
  400bec:	00 
  400bed:	0f ae 54 24 fc       	ldmxcsr -0x4(%rsp)
  400bf2:	c3                   	retq   

0000000000400bf3 <_start>:
  400bf3:	31 ed                	xor    %ebp,%ebp
  400bf5:	49 89 d1             	mov    %rdx,%r9
  400bf8:	5e                   	pop    %rsi
  400bf9:	48 89 e2             	mov    %rsp,%rdx
  400bfc:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  400c00:	50                   	push   %rax
  400c01:	54                   	push   %rsp
  400c02:	49 c7 c0 50 0d 40 00 	mov    $0x400d50,%r8
  400c09:	48 c7 c1 e0 0c 40 00 	mov    $0x400ce0,%rcx
  400c10:	48 c7 c7 d0 09 40 00 	mov    $0x4009d0,%rdi
  400c17:	e8 24 fd ff ff       	callq  400940 <__libc_start_main@plt>
  400c1c:	f4                   	hlt    
  400c1d:	0f 1f 00             	nopl   (%rax)

0000000000400c20 <deregister_tm_clones>:
  400c20:	b8 9f 20 60 00       	mov    $0x60209f,%eax
  400c25:	55                   	push   %rbp
  400c26:	48 2d 98 20 60 00    	sub    $0x602098,%rax
  400c2c:	48 83 f8 0e          	cmp    $0xe,%rax
  400c30:	48 89 e5             	mov    %rsp,%rbp
  400c33:	77 02                	ja     400c37 <deregister_tm_clones+0x17>
  400c35:	5d                   	pop    %rbp
  400c36:	c3                   	retq   
  400c37:	b8 00 00 00 00       	mov    $0x0,%eax
  400c3c:	48 85 c0             	test   %rax,%rax
  400c3f:	74 f4                	je     400c35 <deregister_tm_clones+0x15>
  400c41:	5d                   	pop    %rbp
  400c42:	bf 98 20 60 00       	mov    $0x602098,%edi
  400c47:	ff e0                	jmpq   *%rax
  400c49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400c50 <register_tm_clones>:
  400c50:	b8 98 20 60 00       	mov    $0x602098,%eax
  400c55:	55                   	push   %rbp
  400c56:	48 2d 98 20 60 00    	sub    $0x602098,%rax
  400c5c:	48 c1 f8 03          	sar    $0x3,%rax
  400c60:	48 89 e5             	mov    %rsp,%rbp
  400c63:	48 89 c2             	mov    %rax,%rdx
  400c66:	48 c1 ea 3f          	shr    $0x3f,%rdx
  400c6a:	48 01 d0             	add    %rdx,%rax
  400c6d:	48 d1 f8             	sar    %rax
  400c70:	75 02                	jne    400c74 <register_tm_clones+0x24>
  400c72:	5d                   	pop    %rbp
  400c73:	c3                   	retq   
  400c74:	ba 00 00 00 00       	mov    $0x0,%edx
  400c79:	48 85 d2             	test   %rdx,%rdx
  400c7c:	74 f4                	je     400c72 <register_tm_clones+0x22>
  400c7e:	5d                   	pop    %rbp
  400c7f:	48 89 c6             	mov    %rax,%rsi
  400c82:	bf 98 20 60 00       	mov    $0x602098,%edi
  400c87:	ff e2                	jmpq   *%rdx
  400c89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000400c90 <__do_global_dtors_aux>:
  400c90:	80 3d 19 15 20 00 00 	cmpb   $0x0,0x201519(%rip)        # 6021b0 <completed.6972>
  400c97:	75 11                	jne    400caa <__do_global_dtors_aux+0x1a>
  400c99:	55                   	push   %rbp
  400c9a:	48 89 e5             	mov    %rsp,%rbp
  400c9d:	e8 7e ff ff ff       	callq  400c20 <deregister_tm_clones>
  400ca2:	5d                   	pop    %rbp
  400ca3:	c6 05 06 15 20 00 01 	movb   $0x1,0x201506(%rip)        # 6021b0 <completed.6972>
  400caa:	f3 c3                	repz retq 
  400cac:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400cb0 <frame_dummy>:
  400cb0:	48 83 3d 58 11 20 00 	cmpq   $0x0,0x201158(%rip)        # 601e10 <__JCR_END__>
  400cb7:	00 
  400cb8:	74 1e                	je     400cd8 <frame_dummy+0x28>
  400cba:	b8 00 00 00 00       	mov    $0x0,%eax
  400cbf:	48 85 c0             	test   %rax,%rax
  400cc2:	74 14                	je     400cd8 <frame_dummy+0x28>
  400cc4:	55                   	push   %rbp
  400cc5:	bf 10 1e 60 00       	mov    $0x601e10,%edi
  400cca:	48 89 e5             	mov    %rsp,%rbp
  400ccd:	ff d0                	callq  *%rax
  400ccf:	5d                   	pop    %rbp
  400cd0:	e9 7b ff ff ff       	jmpq   400c50 <register_tm_clones>
  400cd5:	0f 1f 00             	nopl   (%rax)
  400cd8:	e9 73 ff ff ff       	jmpq   400c50 <register_tm_clones>
  400cdd:	0f 1f 00             	nopl   (%rax)

0000000000400ce0 <__libc_csu_init>:
  400ce0:	41 57                	push   %r15
  400ce2:	41 89 ff             	mov    %edi,%r15d
  400ce5:	41 56                	push   %r14
  400ce7:	49 89 f6             	mov    %rsi,%r14
  400cea:	41 55                	push   %r13
  400cec:	49 89 d5             	mov    %rdx,%r13
  400cef:	41 54                	push   %r12
  400cf1:	4c 8d 25 f8 10 20 00 	lea    0x2010f8(%rip),%r12        # 601df0 <__frame_dummy_init_array_entry>
  400cf8:	55                   	push   %rbp
  400cf9:	48 8d 2d 08 11 20 00 	lea    0x201108(%rip),%rbp        # 601e08 <__init_array_end>
  400d00:	53                   	push   %rbx
  400d01:	4c 29 e5             	sub    %r12,%rbp
  400d04:	31 db                	xor    %ebx,%ebx
  400d06:	48 c1 fd 03          	sar    $0x3,%rbp
  400d0a:	48 83 ec 08          	sub    $0x8,%rsp
  400d0e:	e8 ad fb ff ff       	callq  4008c0 <_init>
  400d13:	48 85 ed             	test   %rbp,%rbp
  400d16:	74 1e                	je     400d36 <__libc_csu_init+0x56>
  400d18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  400d1f:	00 
  400d20:	4c 89 ea             	mov    %r13,%rdx
  400d23:	4c 89 f6             	mov    %r14,%rsi
  400d26:	44 89 ff             	mov    %r15d,%edi
  400d29:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  400d2d:	48 83 c3 01          	add    $0x1,%rbx
  400d31:	48 39 eb             	cmp    %rbp,%rbx
  400d34:	75 ea                	jne    400d20 <__libc_csu_init+0x40>
  400d36:	48 83 c4 08          	add    $0x8,%rsp
  400d3a:	5b                   	pop    %rbx
  400d3b:	5d                   	pop    %rbp
  400d3c:	41 5c                	pop    %r12
  400d3e:	41 5d                	pop    %r13
  400d40:	41 5e                	pop    %r14
  400d42:	41 5f                	pop    %r15
  400d44:	c3                   	retq   
  400d45:	66 66 2e 0f 1f 84 00 	data32 nopw %cs:0x0(%rax,%rax,1)
  400d4c:	00 00 00 00 

0000000000400d50 <__libc_csu_fini>:
  400d50:	f3 c3                	repz retq 

Desensamblado de la sección .fini:

0000000000400d54 <_fini>:
  400d54:	48 83 ec 08          	sub    $0x8,%rsp
  400d58:	48 83 c4 08          	add    $0x8,%rsp
  400d5c:	c3                   	retq   
