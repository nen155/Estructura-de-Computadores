
media-h:     formato del fichero elf32-i386


Desensamblado de la sección .init:

08048578 <_init>:
 8048578:	53                   	push   %ebx
 8048579:	83 ec 08             	sub    $0x8,%esp
 804857c:	e8 ff 01 00 00       	call   8048780 <__x86.get_pc_thunk.bx>
 8048581:	81 c3 7f 1a 00 00    	add    $0x1a7f,%ebx
 8048587:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 804858d:	85 c0                	test   %eax,%eax
 804858f:	74 05                	je     8048596 <_init+0x1e>
 8048591:	e8 3a 00 00 00       	call   80485d0 <__gmon_start__@plt>
 8048596:	83 c4 08             	add    $0x8,%esp
 8048599:	5b                   	pop    %ebx
 804859a:	c3                   	ret    

Desensamblado de la sección .plt:

080485a0 <__cxa_atexit@plt-0x10>:
 80485a0:	ff 35 04 a0 04 08    	pushl  0x804a004
 80485a6:	ff 25 08 a0 04 08    	jmp    *0x804a008
 80485ac:	00 00                	add    %al,(%eax)
	...

080485b0 <__cxa_atexit@plt>:
 80485b0:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80485b6:	68 00 00 00 00       	push   $0x0
 80485bb:	e9 e0 ff ff ff       	jmp    80485a0 <_init+0x28>

080485c0 <__divdi3@plt>:
 80485c0:	ff 25 10 a0 04 08    	jmp    *0x804a010
 80485c6:	68 08 00 00 00       	push   $0x8
 80485cb:	e9 d0 ff ff ff       	jmp    80485a0 <_init+0x28>

080485d0 <__gmon_start__@plt>:
 80485d0:	ff 25 14 a0 04 08    	jmp    *0x804a014
 80485d6:	68 10 00 00 00       	push   $0x10
 80485db:	e9 c0 ff ff ff       	jmp    80485a0 <_init+0x28>

080485e0 <std::ios_base::Init::Init()@plt>:
 80485e0:	ff 25 18 a0 04 08    	jmp    *0x804a018
 80485e6:	68 18 00 00 00       	push   $0x18
 80485eb:	e9 b0 ff ff ff       	jmp    80485a0 <_init+0x28>

080485f0 <__libc_start_main@plt>:
 80485f0:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 80485f6:	68 20 00 00 00       	push   $0x20
 80485fb:	e9 a0 ff ff ff       	jmp    80485a0 <_init+0x28>

08048600 <std::ios_base::Init::~Init()@plt>:
 8048600:	ff 25 20 a0 04 08    	jmp    *0x804a020
 8048606:	68 28 00 00 00       	push   $0x28
 804860b:	e9 90 ff ff ff       	jmp    80485a0 <_init+0x28>

08048610 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
 8048610:	ff 25 24 a0 04 08    	jmp    *0x804a024
 8048616:	68 30 00 00 00       	push   $0x30
 804861b:	e9 80 ff ff ff       	jmp    80485a0 <_init+0x28>

08048620 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
 8048620:	ff 25 28 a0 04 08    	jmp    *0x804a028
 8048626:	68 38 00 00 00       	push   $0x38
 804862b:	e9 70 ff ff ff       	jmp    80485a0 <_init+0x28>

08048630 <std::ostream& std::ostream::_M_insert<long long>(long long)@plt>:
 8048630:	ff 25 2c a0 04 08    	jmp    *0x804a02c
 8048636:	68 40 00 00 00       	push   $0x40
 804863b:	e9 60 ff ff ff       	jmp    80485a0 <_init+0x28>

Desensamblado de la sección .text:

08048640 <main>:
 8048640:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048644:	83 e4 f0             	and    $0xfffffff0,%esp
 8048647:	ff 71 fc             	pushl  -0x4(%ecx)
 804864a:	55                   	push   %ebp
 804864b:	89 e5                	mov    %esp,%ebp
 804864d:	56                   	push   %esi
 804864e:	be 34 a0 04 08       	mov    $0x804a034,%esi
 8048653:	53                   	push   %ebx
 8048654:	51                   	push   %ecx
 8048655:	83 ec 24             	sub    $0x24,%esp
 8048658:	6a 09                	push   $0x9
 804865a:	68 34 a0 04 08       	push   $0x804a034
 804865f:	e8 14 02 00 00       	call   8048878 <media(int*, int)>
 8048664:	59                   	pop    %ecx
 8048665:	5b                   	pop    %ebx
 8048666:	68 44 89 04 08       	push   $0x8048944
 804866b:	89 d1                	mov    %edx,%ecx
 804866d:	68 60 a0 04 08       	push   $0x804a060
 8048672:	89 0d fc a0 04 08    	mov    %ecx,0x804a0fc
 8048678:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
 804867b:	a3 f8 a0 04 08       	mov    %eax,0x804a0f8
 8048680:	89 45 e0             	mov    %eax,-0x20(%ebp)
 8048683:	e8 88 ff ff ff       	call   8048610 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048688:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 804868b:	83 c4 0c             	add    $0xc,%esp
 804868e:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8048691:	51                   	push   %ecx
 8048692:	52                   	push   %edx
 8048693:	50                   	push   %eax
 8048694:	e8 97 ff ff ff       	call   8048630 <std::ostream& std::ostream::_M_insert<long long>(long long)@plt>
 8048699:	89 04 24             	mov    %eax,(%esp)
 804869c:	e8 7f ff ff ff       	call   8048620 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 80486a1:	83 c4 10             	add    $0x10,%esp
 80486a4:	31 c0                	xor    %eax,%eax
 80486a6:	31 d2                	xor    %edx,%edx
 80486a8:	8b 0e                	mov    (%esi),%ecx
 80486aa:	89 cb                	mov    %ecx,%ebx
 80486ac:	c1 fb 1f             	sar    $0x1f,%ebx
 80486af:	01 c8                	add    %ecx,%eax
 80486b1:	11 da                	adc    %ebx,%edx
 80486b3:	83 c6 04             	add    $0x4,%esi
 80486b6:	81 fe 58 a0 04 08    	cmp    $0x804a058,%esi
 80486bc:	75 ea                	jne    80486a8 <main+0x68>
 80486be:	6a 00                	push   $0x0
 80486c0:	6a 09                	push   $0x9
 80486c2:	52                   	push   %edx
 80486c3:	50                   	push   %eax
 80486c4:	e8 f7 fe ff ff       	call   80485c0 <__divdi3@plt>
 80486c9:	5b                   	pop    %ebx
 80486ca:	5e                   	pop    %esi
 80486cb:	68 44 89 04 08       	push   $0x8048944
 80486d0:	89 d1                	mov    %edx,%ecx
 80486d2:	68 60 a0 04 08       	push   $0x804a060
 80486d7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
 80486da:	89 0d f4 a0 04 08    	mov    %ecx,0x804a0f4
 80486e0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80486e3:	a3 f0 a0 04 08       	mov    %eax,0x804a0f0
 80486e8:	e8 23 ff ff ff       	call   8048610 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 80486ed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
 80486f0:	83 c4 0c             	add    $0xc,%esp
 80486f3:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80486f6:	51                   	push   %ecx
 80486f7:	52                   	push   %edx
 80486f8:	50                   	push   %eax
 80486f9:	e8 32 ff ff ff       	call   8048630 <std::ostream& std::ostream::_M_insert<long long>(long long)@plt>
 80486fe:	89 04 24             	mov    %eax,(%esp)
 8048701:	e8 1a ff ff ff       	call   8048620 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048706:	a1 f0 a0 04 08       	mov    0x804a0f0,%eax
 804870b:	03 05 f8 a0 04 08    	add    0x804a0f8,%eax
 8048711:	8d 65 f4             	lea    -0xc(%ebp),%esp
 8048714:	59                   	pop    %ecx
 8048715:	5b                   	pop    %ebx
 8048716:	5e                   	pop    %esi
 8048717:	5d                   	pop    %ebp
 8048718:	8d 61 fc             	lea    -0x4(%ecx),%esp
 804871b:	c3                   	ret    

0804871c <_GLOBAL__sub_I_v>:
 804871c:	55                   	push   %ebp
 804871d:	89 e5                	mov    %esp,%ebp
 804871f:	83 ec 14             	sub    $0x14,%esp
 8048722:	68 00 a1 04 08       	push   $0x804a100
 8048727:	e8 b4 fe ff ff       	call   80485e0 <std::ios_base::Init::Init()@plt>
 804872c:	83 c4 0c             	add    $0xc,%esp
 804872f:	68 40 89 04 08       	push   $0x8048940
 8048734:	68 00 a1 04 08       	push   $0x804a100
 8048739:	68 00 86 04 08       	push   $0x8048600
 804873e:	e8 6d fe ff ff       	call   80485b0 <__cxa_atexit@plt>
 8048743:	83 c4 10             	add    $0x10,%esp
 8048746:	c7 05 54 a0 04 08 ff 	movl   $0x7fffffff,0x804a054
 804874d:	ff ff 7f 
 8048750:	c9                   	leave  
 8048751:	c3                   	ret    
 8048752:	66 90                	xchg   %ax,%ax

08048754 <_start>:
 8048754:	31 ed                	xor    %ebp,%ebp
 8048756:	5e                   	pop    %esi
 8048757:	89 e1                	mov    %esp,%ecx
 8048759:	83 e4 f0             	and    $0xfffffff0,%esp
 804875c:	50                   	push   %eax
 804875d:	54                   	push   %esp
 804875e:	52                   	push   %edx
 804875f:	68 20 89 04 08       	push   $0x8048920
 8048764:	68 b0 88 04 08       	push   $0x80488b0
 8048769:	51                   	push   %ecx
 804876a:	56                   	push   %esi
 804876b:	68 40 86 04 08       	push   $0x8048640
 8048770:	e8 7b fe ff ff       	call   80485f0 <__libc_start_main@plt>
 8048775:	f4                   	hlt    
 8048776:	66 90                	xchg   %ax,%ax
 8048778:	66 90                	xchg   %ax,%ax
 804877a:	66 90                	xchg   %ax,%ax
 804877c:	66 90                	xchg   %ax,%ax
 804877e:	66 90                	xchg   %ax,%ax

08048780 <__x86.get_pc_thunk.bx>:
 8048780:	8b 1c 24             	mov    (%esp),%ebx
 8048783:	c3                   	ret    
 8048784:	66 90                	xchg   %ax,%ax
 8048786:	66 90                	xchg   %ax,%ax
 8048788:	66 90                	xchg   %ax,%ax
 804878a:	66 90                	xchg   %ax,%ax
 804878c:	66 90                	xchg   %ax,%ax
 804878e:	66 90                	xchg   %ax,%ax

08048790 <deregister_tm_clones>:
 8048790:	b8 5b a0 04 08       	mov    $0x804a05b,%eax
 8048795:	2d 58 a0 04 08       	sub    $0x804a058,%eax
 804879a:	83 f8 06             	cmp    $0x6,%eax
 804879d:	77 01                	ja     80487a0 <deregister_tm_clones+0x10>
 804879f:	c3                   	ret    
 80487a0:	b8 00 00 00 00       	mov    $0x0,%eax
 80487a5:	85 c0                	test   %eax,%eax
 80487a7:	74 f6                	je     804879f <deregister_tm_clones+0xf>
 80487a9:	55                   	push   %ebp
 80487aa:	89 e5                	mov    %esp,%ebp
 80487ac:	83 ec 18             	sub    $0x18,%esp
 80487af:	c7 04 24 58 a0 04 08 	movl   $0x804a058,(%esp)
 80487b6:	ff d0                	call   *%eax
 80487b8:	c9                   	leave  
 80487b9:	c3                   	ret    
 80487ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080487c0 <register_tm_clones>:
 80487c0:	b8 58 a0 04 08       	mov    $0x804a058,%eax
 80487c5:	2d 58 a0 04 08       	sub    $0x804a058,%eax
 80487ca:	c1 f8 02             	sar    $0x2,%eax
 80487cd:	89 c2                	mov    %eax,%edx
 80487cf:	c1 ea 1f             	shr    $0x1f,%edx
 80487d2:	01 d0                	add    %edx,%eax
 80487d4:	d1 f8                	sar    %eax
 80487d6:	75 01                	jne    80487d9 <register_tm_clones+0x19>
 80487d8:	c3                   	ret    
 80487d9:	ba 00 00 00 00       	mov    $0x0,%edx
 80487de:	85 d2                	test   %edx,%edx
 80487e0:	74 f6                	je     80487d8 <register_tm_clones+0x18>
 80487e2:	55                   	push   %ebp
 80487e3:	89 e5                	mov    %esp,%ebp
 80487e5:	83 ec 18             	sub    $0x18,%esp
 80487e8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80487ec:	c7 04 24 58 a0 04 08 	movl   $0x804a058,(%esp)
 80487f3:	ff d2                	call   *%edx
 80487f5:	c9                   	leave  
 80487f6:	c3                   	ret    
 80487f7:	89 f6                	mov    %esi,%esi
 80487f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048800 <__do_global_dtors_aux>:
 8048800:	80 3d ec a0 04 08 00 	cmpb   $0x0,0x804a0ec
 8048807:	75 13                	jne    804881c <__do_global_dtors_aux+0x1c>
 8048809:	55                   	push   %ebp
 804880a:	89 e5                	mov    %esp,%ebp
 804880c:	83 ec 08             	sub    $0x8,%esp
 804880f:	e8 7c ff ff ff       	call   8048790 <deregister_tm_clones>
 8048814:	c6 05 ec a0 04 08 01 	movb   $0x1,0x804a0ec
 804881b:	c9                   	leave  
 804881c:	f3 c3                	repz ret 
 804881e:	66 90                	xchg   %ax,%ax

08048820 <frame_dummy>:
 8048820:	a1 f8 9e 04 08       	mov    0x8049ef8,%eax
 8048825:	85 c0                	test   %eax,%eax
 8048827:	74 1f                	je     8048848 <frame_dummy+0x28>
 8048829:	b8 00 00 00 00       	mov    $0x0,%eax
 804882e:	85 c0                	test   %eax,%eax
 8048830:	74 16                	je     8048848 <frame_dummy+0x28>
 8048832:	55                   	push   %ebp
 8048833:	89 e5                	mov    %esp,%ebp
 8048835:	83 ec 18             	sub    $0x18,%esp
 8048838:	c7 04 24 f8 9e 04 08 	movl   $0x8049ef8,(%esp)
 804883f:	ff d0                	call   *%eax
 8048841:	c9                   	leave  
 8048842:	e9 79 ff ff ff       	jmp    80487c0 <register_tm_clones>
 8048847:	90                   	nop
 8048848:	e9 73 ff ff ff       	jmp    80487c0 <register_tm_clones>
 804884d:	66 90                	xchg   %ax,%ax
 804884f:	90                   	nop

08048850 <suma64s(int*, int)>:
 8048850:	55                   	push   %ebp
 8048851:	31 c0                	xor    %eax,%eax
 8048853:	89 e5                	mov    %esp,%ebp
 8048855:	31 d2                	xor    %edx,%edx
 8048857:	57                   	push   %edi
 8048858:	8b 7d 08             	mov    0x8(%ebp),%edi
 804885b:	56                   	push   %esi
 804885c:	31 f6                	xor    %esi,%esi
 804885e:	53                   	push   %ebx
 804885f:	3b 75 0c             	cmp    0xc(%ebp),%esi
 8048862:	7d 0f                	jge    8048873 <suma64s(int*, int)+0x23>
 8048864:	8b 0c b7             	mov    (%edi,%esi,4),%ecx
 8048867:	89 cb                	mov    %ecx,%ebx
 8048869:	c1 fb 1f             	sar    $0x1f,%ebx
 804886c:	01 c8                	add    %ecx,%eax
 804886e:	11 da                	adc    %ebx,%edx
 8048870:	46                   	inc    %esi
 8048871:	eb ec                	jmp    804885f <suma64s(int*, int)+0xf>
 8048873:	5b                   	pop    %ebx
 8048874:	5e                   	pop    %esi
 8048875:	5f                   	pop    %edi
 8048876:	5d                   	pop    %ebp
 8048877:	c3                   	ret    

08048878 <media(int*, int)>:
 8048878:	55                   	push   %ebp
 8048879:	89 e5                	mov    %esp,%ebp
 804887b:	53                   	push   %ebx
 804887c:	50                   	push   %eax
 804887d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 8048880:	53                   	push   %ebx
 8048881:	ff 75 08             	pushl  0x8(%ebp)
 8048884:	e8 c7 ff ff ff       	call   8048850 <suma64s(int*, int)>
 8048889:	59                   	pop    %ecx
 804888a:	59                   	pop    %ecx
 804888b:	89 d9                	mov    %ebx,%ecx
 804888d:	c1 fb 1f             	sar    $0x1f,%ebx
 8048890:	53                   	push   %ebx
 8048891:	51                   	push   %ecx
 8048892:	52                   	push   %edx
 8048893:	50                   	push   %eax
 8048894:	e8 27 fd ff ff       	call   80485c0 <__divdi3@plt>
 8048899:	83 c4 10             	add    $0x10,%esp
 804889c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 804889f:	c9                   	leave  
 80488a0:	c3                   	ret    
 80488a1:	66 90                	xchg   %ax,%ax
 80488a3:	66 90                	xchg   %ax,%ax
 80488a5:	66 90                	xchg   %ax,%ax
 80488a7:	66 90                	xchg   %ax,%ax
 80488a9:	66 90                	xchg   %ax,%ax
 80488ab:	66 90                	xchg   %ax,%ax
 80488ad:	66 90                	xchg   %ax,%ax
 80488af:	90                   	nop

080488b0 <__libc_csu_init>:
 80488b0:	55                   	push   %ebp
 80488b1:	57                   	push   %edi
 80488b2:	31 ff                	xor    %edi,%edi
 80488b4:	56                   	push   %esi
 80488b5:	53                   	push   %ebx
 80488b6:	e8 c5 fe ff ff       	call   8048780 <__x86.get_pc_thunk.bx>
 80488bb:	81 c3 45 17 00 00    	add    $0x1745,%ebx
 80488c1:	83 ec 1c             	sub    $0x1c,%esp
 80488c4:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 80488c8:	8d b3 f4 fe ff ff    	lea    -0x10c(%ebx),%esi
 80488ce:	e8 a5 fc ff ff       	call   8048578 <_init>
 80488d3:	8d 83 ec fe ff ff    	lea    -0x114(%ebx),%eax
 80488d9:	29 c6                	sub    %eax,%esi
 80488db:	c1 fe 02             	sar    $0x2,%esi
 80488de:	85 f6                	test   %esi,%esi
 80488e0:	74 27                	je     8048909 <__libc_csu_init+0x59>
 80488e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80488e8:	8b 44 24 38          	mov    0x38(%esp),%eax
 80488ec:	89 2c 24             	mov    %ebp,(%esp)
 80488ef:	89 44 24 08          	mov    %eax,0x8(%esp)
 80488f3:	8b 44 24 34          	mov    0x34(%esp),%eax
 80488f7:	89 44 24 04          	mov    %eax,0x4(%esp)
 80488fb:	ff 94 bb ec fe ff ff 	call   *-0x114(%ebx,%edi,4)
 8048902:	83 c7 01             	add    $0x1,%edi
 8048905:	39 f7                	cmp    %esi,%edi
 8048907:	75 df                	jne    80488e8 <__libc_csu_init+0x38>
 8048909:	83 c4 1c             	add    $0x1c,%esp
 804890c:	5b                   	pop    %ebx
 804890d:	5e                   	pop    %esi
 804890e:	5f                   	pop    %edi
 804890f:	5d                   	pop    %ebp
 8048910:	c3                   	ret    
 8048911:	eb 0d                	jmp    8048920 <__libc_csu_fini>
 8048913:	90                   	nop
 8048914:	90                   	nop
 8048915:	90                   	nop
 8048916:	90                   	nop
 8048917:	90                   	nop
 8048918:	90                   	nop
 8048919:	90                   	nop
 804891a:	90                   	nop
 804891b:	90                   	nop
 804891c:	90                   	nop
 804891d:	90                   	nop
 804891e:	90                   	nop
 804891f:	90                   	nop

08048920 <__libc_csu_fini>:
 8048920:	f3 c3                	repz ret 
 8048922:	66 90                	xchg   %ax,%ax

Desensamblado de la sección .fini:

08048924 <_fini>:
 8048924:	53                   	push   %ebx
 8048925:	83 ec 08             	sub    $0x8,%esp
 8048928:	e8 53 fe ff ff       	call   8048780 <__x86.get_pc_thunk.bx>
 804892d:	81 c3 d3 16 00 00    	add    $0x16d3,%ebx
 8048933:	83 c4 08             	add    $0x8,%esp
 8048936:	5b                   	pop    %ebx
 8048937:	c3                   	ret    
