
bomba-t:     formato del fichero elf32-i386


Desensamblado de la sección .init:

08048b04 <_init>:
 8048b04:	53                   	push   %ebx
 8048b05:	83 ec 08             	sub    $0x8,%esp
 8048b08:	e8 f3 02 00 00       	call   8048e00 <__x86.get_pc_thunk.bx>
 8048b0d:	81 c3 f3 34 00 00    	add    $0x34f3,%ebx
 8048b13:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048b19:	85 c0                	test   %eax,%eax
 8048b1b:	74 05                	je     8048b22 <_init+0x1e>
 8048b1d:	e8 3e 00 00 00       	call   8048b60 <__gmon_start__@plt>
 8048b22:	83 c4 08             	add    $0x8,%esp
 8048b25:	5b                   	pop    %ebx
 8048b26:	c3                   	ret    

Desensamblado de la sección .plt:

08048b30 <__cxa_atexit@plt-0x10>:
 8048b30:	ff 35 04 c0 04 08    	pushl  0x804c004
 8048b36:	ff 25 08 c0 04 08    	jmp    *0x804c008
 8048b3c:	00 00                	add    %al,(%eax)
	...

08048b40 <__cxa_atexit@plt>:
 8048b40:	ff 25 0c c0 04 08    	jmp    *0x804c00c
 8048b46:	68 00 00 00 00       	push   $0x0
 8048b4b:	e9 e0 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048b50 <memcmp@plt>:
 8048b50:	ff 25 10 c0 04 08    	jmp    *0x804c010
 8048b56:	68 08 00 00 00       	push   $0x8
 8048b5b:	e9 d0 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048b60 <__gmon_start__@plt>:
 8048b60:	ff 25 14 c0 04 08    	jmp    *0x804c014
 8048b66:	68 10 00 00 00       	push   $0x10
 8048b6b:	e9 c0 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048b70 <sched_yield@plt>:
 8048b70:	ff 25 18 c0 04 08    	jmp    *0x804c018
 8048b76:	68 18 00 00 00       	push   $0x18
 8048b7b:	e9 b0 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048b80 <operator delete(void*)@plt>:
 8048b80:	ff 25 1c c0 04 08    	jmp    *0x804c01c
 8048b86:	68 20 00 00 00       	push   $0x20
 8048b8b:	e9 a0 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048b90 <std::string::_Rep::_M_dispose(std::allocator<char> const&)@plt>:
 8048b90:	ff 25 20 c0 04 08    	jmp    *0x804c020
 8048b96:	68 28 00 00 00       	push   $0x28
 8048b9b:	e9 90 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048ba0 <std::ios_base::Init::Init()@plt>:
 8048ba0:	ff 25 24 c0 04 08    	jmp    *0x804c024
 8048ba6:	68 30 00 00 00       	push   $0x30
 8048bab:	e9 80 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048bb0 <std::chrono::_V2::system_clock::now()@plt>:
 8048bb0:	ff 25 28 c0 04 08    	jmp    *0x804c028
 8048bb6:	68 38 00 00 00       	push   $0x38
 8048bbb:	e9 70 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048bc0 <__libc_start_main@plt>:
 8048bc0:	ff 25 2c c0 04 08    	jmp    *0x804c02c
 8048bc6:	68 40 00 00 00       	push   $0x40
 8048bcb:	e9 60 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048bd0 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)@plt>:
 8048bd0:	ff 25 30 c0 04 08    	jmp    *0x804c030
 8048bd6:	68 48 00 00 00       	push   $0x48
 8048bdb:	e9 50 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048be0 <std::ios_base::Init::~Init()@plt>:
 8048be0:	ff 25 34 c0 04 08    	jmp    *0x804c034
 8048be6:	68 50 00 00 00       	push   $0x50
 8048beb:	e9 40 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048bf0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
 8048bf0:	ff 25 38 c0 04 08    	jmp    *0x804c038
 8048bf6:	68 58 00 00 00       	push   $0x58
 8048bfb:	e9 30 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048c00 <std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>:
 8048c00:	ff 25 3c c0 04 08    	jmp    *0x804c03c
 8048c06:	68 60 00 00 00       	push   $0x60
 8048c0b:	e9 20 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048c10 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>:
 8048c10:	ff 25 40 c0 04 08    	jmp    *0x804c040
 8048c16:	68 68 00 00 00       	push   $0x68
 8048c1b:	e9 10 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048c20 <strlen@plt>:
 8048c20:	ff 25 44 c0 04 08    	jmp    *0x804c044
 8048c26:	68 70 00 00 00       	push   $0x70
 8048c2b:	e9 00 ff ff ff       	jmp    8048b30 <_init+0x2c>

08048c30 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
 8048c30:	ff 25 48 c0 04 08    	jmp    *0x804c048
 8048c36:	68 78 00 00 00       	push   $0x78
 8048c3b:	e9 f0 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048c40 <std::thread::join()@plt>:
 8048c40:	ff 25 4c c0 04 08    	jmp    *0x804c04c
 8048c46:	68 80 00 00 00       	push   $0x80
 8048c4b:	e9 e0 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048c50 <std::terminate()@plt>:
 8048c50:	ff 25 50 c0 04 08    	jmp    *0x804c050
 8048c56:	68 88 00 00 00       	push   $0x88
 8048c5b:	e9 d0 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048c60 <__cxa_pure_virtual@plt>:
 8048c60:	ff 25 54 c0 04 08    	jmp    *0x804c054
 8048c66:	68 90 00 00 00       	push   $0x90
 8048c6b:	e9 c0 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048c70 <operator new(unsigned int)@plt>:
 8048c70:	ff 25 58 c0 04 08    	jmp    *0x804c058
 8048c76:	68 98 00 00 00       	push   $0x98
 8048c7b:	e9 b0 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048c80 <std::istream::operator>>(int&)@plt>:
 8048c80:	ff 25 5c c0 04 08    	jmp    *0x804c05c
 8048c86:	68 a0 00 00 00       	push   $0xa0
 8048c8b:	e9 a0 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048c90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>:
 8048c90:	ff 25 60 c0 04 08    	jmp    *0x804c060
 8048c96:	68 a8 00 00 00       	push   $0xa8
 8048c9b:	e9 90 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
 8048ca0:	ff 25 64 c0 04 08    	jmp    *0x804c064
 8048ca6:	68 b0 00 00 00       	push   $0xb0
 8048cab:	e9 80 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048cb0 <__pthread_key_create@plt>:
 8048cb0:	ff 25 68 c0 04 08    	jmp    *0x804c068
 8048cb6:	68 b8 00 00 00       	push   $0xb8
 8048cbb:	e9 70 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048cc0 <__gxx_personality_v0@plt>:
 8048cc0:	ff 25 6c c0 04 08    	jmp    *0x804c06c
 8048cc6:	68 c0 00 00 00       	push   $0xc0
 8048ccb:	e9 60 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048cd0 <_Unwind_Resume@plt>:
 8048cd0:	ff 25 70 c0 04 08    	jmp    *0x804c070
 8048cd6:	68 c8 00 00 00       	push   $0xc8
 8048cdb:	e9 50 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048ce0 <exit@plt>:
 8048ce0:	ff 25 74 c0 04 08    	jmp    *0x804c074
 8048ce6:	68 d0 00 00 00       	push   $0xd0
 8048ceb:	e9 40 fe ff ff       	jmp    8048b30 <_init+0x2c>

08048cf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)@plt>:
 8048cf0:	ff 25 78 c0 04 08    	jmp    *0x804c078
 8048cf6:	68 d8 00 00 00       	push   $0xd8
 8048cfb:	e9 30 fe ff ff       	jmp    8048b30 <_init+0x2c>

Desensamblado de la sección .text:

08048d00 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [clone .part.4]>:
 8048d00:	55                   	push   %ebp
 8048d01:	89 e5                	mov    %esp,%ebp
 8048d03:	83 ec 18             	sub    $0x18,%esp
 8048d06:	8b 10                	mov    (%eax),%edx
 8048d08:	03 42 f4             	add    -0xc(%edx),%eax
 8048d0b:	8b 50 14             	mov    0x14(%eax),%edx
 8048d0e:	89 04 24             	mov    %eax,(%esp)
 8048d11:	83 ca 01             	or     $0x1,%edx
 8048d14:	89 54 24 04          	mov    %edx,0x4(%esp)
 8048d18:	e8 73 ff ff ff       	call   8048c90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
 8048d1d:	c9                   	leave  
 8048d1e:	c3                   	ret    
 8048d1f:	90                   	nop

08048d20 <main>:
 8048d20:	55                   	push   %ebp
 8048d21:	89 e5                	mov    %esp,%ebp
 8048d23:	56                   	push   %esi
 8048d24:	53                   	push   %ebx
 8048d25:	83 e4 f0             	and    $0xfffffff0,%esp
 8048d28:	83 ec 20             	sub    $0x20,%esp
 8048d2b:	8d 74 24 18          	lea    0x18(%esp),%esi
 8048d2f:	8d 5c 24 1c          	lea    0x1c(%esp),%ebx
 8048d33:	89 5c 24 08          	mov    %ebx,0x8(%esp)
 8048d37:	c7 44 24 04 3b 9c 04 	movl   $0x8049c3b,0x4(%esp)
 8048d3e:	08 
 8048d3f:	89 34 24             	mov    %esi,(%esp)
 8048d42:	e8 e9 fe ff ff       	call   8048c30 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
 8048d47:	c7 44 24 04 40 9c 04 	movl   $0x8049c40,0x4(%esp)
 8048d4e:	08 
 8048d4f:	89 34 24             	mov    %esi,(%esp)
 8048d52:	c7 44 24 1c d2 04 00 	movl   $0x4d2,0x1c(%esp)
 8048d59:	00 
 8048d5a:	e8 11 0b 00 00       	call   8049870 <void comparar<std::string>(std::string const&, char const*)>
 8048d5f:	c7 44 24 04 47 9c 04 	movl   $0x8049c47,0x4(%esp)
 8048d66:	08 
 8048d67:	89 1c 24             	mov    %ebx,(%esp)
 8048d6a:	e8 f1 08 00 00       	call   8049660 <void comparar<int>(int const&, char const*)>
 8048d6f:	e8 cc 01 00 00       	call   8048f40 <desactivar()>
 8048d74:	89 c3                	mov    %eax,%ebx
 8048d76:	8d 44 24 17          	lea    0x17(%esp),%eax
 8048d7a:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048d7e:	8b 44 24 18          	mov    0x18(%esp),%eax
 8048d82:	83 e8 0c             	sub    $0xc,%eax
 8048d85:	89 04 24             	mov    %eax,(%esp)
 8048d88:	e8 03 fe ff ff       	call   8048b90 <std::string::_Rep::_M_dispose(std::allocator<char> const&)@plt>
 8048d8d:	89 1c 24             	mov    %ebx,(%esp)
 8048d90:	e8 3b ff ff ff       	call   8048cd0 <_Unwind_Resume@plt>
 8048d95:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048d99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048da0 <_GLOBAL__sub_I__Z8explotarv>:
 8048da0:	55                   	push   %ebp
 8048da1:	89 e5                	mov    %esp,%ebp
 8048da3:	83 ec 18             	sub    $0x18,%esp
 8048da6:	c7 04 24 71 c2 04 08 	movl   $0x804c271,(%esp)
 8048dad:	e8 ee fd ff ff       	call   8048ba0 <std::ios_base::Init::Init()@plt>
 8048db2:	c7 44 24 08 80 c0 04 	movl   $0x804c080,0x8(%esp)
 8048db9:	08 
 8048dba:	c7 44 24 04 71 c2 04 	movl   $0x804c271,0x4(%esp)
 8048dc1:	08 
 8048dc2:	c7 04 24 e0 8b 04 08 	movl   $0x8048be0,(%esp)
 8048dc9:	e8 72 fd ff ff       	call   8048b40 <__cxa_atexit@plt>
 8048dce:	c9                   	leave  
 8048dcf:	c3                   	ret    

08048dd0 <_start>:
 8048dd0:	31 ed                	xor    %ebp,%ebp
 8048dd2:	5e                   	pop    %esi
 8048dd3:	89 e1                	mov    %esp,%ecx
 8048dd5:	83 e4 f0             	and    $0xfffffff0,%esp
 8048dd8:	50                   	push   %eax
 8048dd9:	54                   	push   %esp
 8048dda:	52                   	push   %edx
 8048ddb:	68 70 9b 04 08       	push   $0x8049b70
 8048de0:	68 00 9b 04 08       	push   $0x8049b00
 8048de5:	51                   	push   %ecx
 8048de6:	56                   	push   %esi
 8048de7:	68 20 8d 04 08       	push   $0x8048d20
 8048dec:	e8 cf fd ff ff       	call   8048bc0 <__libc_start_main@plt>
 8048df1:	f4                   	hlt    
 8048df2:	66 90                	xchg   %ax,%ax
 8048df4:	66 90                	xchg   %ax,%ax
 8048df6:	66 90                	xchg   %ax,%ax
 8048df8:	66 90                	xchg   %ax,%ax
 8048dfa:	66 90                	xchg   %ax,%ax
 8048dfc:	66 90                	xchg   %ax,%ax
 8048dfe:	66 90                	xchg   %ax,%ax

08048e00 <__x86.get_pc_thunk.bx>:
 8048e00:	8b 1c 24             	mov    (%esp),%ebx
 8048e03:	c3                   	ret    
 8048e04:	66 90                	xchg   %ax,%ax
 8048e06:	66 90                	xchg   %ax,%ax
 8048e08:	66 90                	xchg   %ax,%ax
 8048e0a:	66 90                	xchg   %ax,%ax
 8048e0c:	66 90                	xchg   %ax,%ax
 8048e0e:	66 90                	xchg   %ax,%ax

08048e10 <deregister_tm_clones>:
 8048e10:	b8 87 c0 04 08       	mov    $0x804c087,%eax
 8048e15:	2d 84 c0 04 08       	sub    $0x804c084,%eax
 8048e1a:	83 f8 06             	cmp    $0x6,%eax
 8048e1d:	77 01                	ja     8048e20 <deregister_tm_clones+0x10>
 8048e1f:	c3                   	ret    
 8048e20:	b8 00 00 00 00       	mov    $0x0,%eax
 8048e25:	85 c0                	test   %eax,%eax
 8048e27:	74 f6                	je     8048e1f <deregister_tm_clones+0xf>
 8048e29:	55                   	push   %ebp
 8048e2a:	89 e5                	mov    %esp,%ebp
 8048e2c:	83 ec 18             	sub    $0x18,%esp
 8048e2f:	c7 04 24 84 c0 04 08 	movl   $0x804c084,(%esp)
 8048e36:	ff d0                	call   *%eax
 8048e38:	c9                   	leave  
 8048e39:	c3                   	ret    
 8048e3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048e40 <register_tm_clones>:
 8048e40:	b8 84 c0 04 08       	mov    $0x804c084,%eax
 8048e45:	2d 84 c0 04 08       	sub    $0x804c084,%eax
 8048e4a:	c1 f8 02             	sar    $0x2,%eax
 8048e4d:	89 c2                	mov    %eax,%edx
 8048e4f:	c1 ea 1f             	shr    $0x1f,%edx
 8048e52:	01 d0                	add    %edx,%eax
 8048e54:	d1 f8                	sar    %eax
 8048e56:	75 01                	jne    8048e59 <register_tm_clones+0x19>
 8048e58:	c3                   	ret    
 8048e59:	ba 00 00 00 00       	mov    $0x0,%edx
 8048e5e:	85 d2                	test   %edx,%edx
 8048e60:	74 f6                	je     8048e58 <register_tm_clones+0x18>
 8048e62:	55                   	push   %ebp
 8048e63:	89 e5                	mov    %esp,%ebp
 8048e65:	83 ec 18             	sub    $0x18,%esp
 8048e68:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048e6c:	c7 04 24 84 c0 04 08 	movl   $0x804c084,(%esp)
 8048e73:	ff d2                	call   *%edx
 8048e75:	c9                   	leave  
 8048e76:	c3                   	ret    
 8048e77:	89 f6                	mov    %esi,%esi
 8048e79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048e80 <__do_global_dtors_aux>:
 8048e80:	80 3d 70 c2 04 08 00 	cmpb   $0x0,0x804c270
 8048e87:	75 13                	jne    8048e9c <__do_global_dtors_aux+0x1c>
 8048e89:	55                   	push   %ebp
 8048e8a:	89 e5                	mov    %esp,%ebp
 8048e8c:	83 ec 08             	sub    $0x8,%esp
 8048e8f:	e8 7c ff ff ff       	call   8048e10 <deregister_tm_clones>
 8048e94:	c6 05 70 c2 04 08 01 	movb   $0x1,0x804c270
 8048e9b:	c9                   	leave  
 8048e9c:	f3 c3                	repz ret 
 8048e9e:	66 90                	xchg   %ax,%ax

08048ea0 <frame_dummy>:
 8048ea0:	a1 f0 be 04 08       	mov    0x804bef0,%eax
 8048ea5:	85 c0                	test   %eax,%eax
 8048ea7:	74 1f                	je     8048ec8 <frame_dummy+0x28>
 8048ea9:	b8 00 00 00 00       	mov    $0x0,%eax
 8048eae:	85 c0                	test   %eax,%eax
 8048eb0:	74 16                	je     8048ec8 <frame_dummy+0x28>
 8048eb2:	55                   	push   %ebp
 8048eb3:	89 e5                	mov    %esp,%ebp
 8048eb5:	83 ec 18             	sub    $0x18,%esp
 8048eb8:	c7 04 24 f0 be 04 08 	movl   $0x804bef0,(%esp)
 8048ebf:	ff d0                	call   *%eax
 8048ec1:	c9                   	leave  
 8048ec2:	e9 79 ff ff ff       	jmp    8048e40 <register_tm_clones>
 8048ec7:	90                   	nop
 8048ec8:	e9 73 ff ff ff       	jmp    8048e40 <register_tm_clones>
 8048ecd:	66 90                	xchg   %ax,%ax
 8048ecf:	90                   	nop

08048ed0 <explotar()>:
 8048ed0:	55                   	push   %ebp
 8048ed1:	89 e5                	mov    %esp,%ebp
 8048ed3:	83 ec 18             	sub    $0x18,%esp
 8048ed6:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8048edd:	e8 be fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048ee2:	c7 44 24 04 a8 9b 04 	movl   $0x8049ba8,0x4(%esp)
 8048ee9:	08 
 8048eea:	89 04 24             	mov    %eax,(%esp)
 8048eed:	e8 fe fc ff ff       	call   8048bf0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048ef2:	89 04 24             	mov    %eax,(%esp)
 8048ef5:	e8 a6 fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048efa:	c7 44 24 04 d4 9b 04 	movl   $0x8049bd4,0x4(%esp)
 8048f01:	08 
 8048f02:	89 04 24             	mov    %eax,(%esp)
 8048f05:	e8 e6 fc ff ff       	call   8048bf0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048f0a:	89 04 24             	mov    %eax,(%esp)
 8048f0d:	e8 8e fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048f12:	c7 44 24 04 a8 9b 04 	movl   $0x8049ba8,0x4(%esp)
 8048f19:	08 
 8048f1a:	89 04 24             	mov    %eax,(%esp)
 8048f1d:	e8 ce fc ff ff       	call   8048bf0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048f22:	89 04 24             	mov    %eax,(%esp)
 8048f25:	e8 76 fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048f2a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048f31:	e8 aa fd ff ff       	call   8048ce0 <exit@plt>
 8048f36:	8d 76 00             	lea    0x0(%esi),%esi
 8048f39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048f40 <desactivar()>:
 8048f40:	55                   	push   %ebp
 8048f41:	89 e5                	mov    %esp,%ebp
 8048f43:	83 ec 18             	sub    $0x18,%esp
 8048f46:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8048f4d:	e8 4e fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048f52:	c7 44 24 04 a8 9b 04 	movl   $0x8049ba8,0x4(%esp)
 8048f59:	08 
 8048f5a:	89 04 24             	mov    %eax,(%esp)
 8048f5d:	e8 8e fc ff ff       	call   8048bf0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048f62:	89 04 24             	mov    %eax,(%esp)
 8048f65:	e8 36 fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048f6a:	c7 44 24 04 00 9c 04 	movl   $0x8049c00,0x4(%esp)
 8048f71:	08 
 8048f72:	89 04 24             	mov    %eax,(%esp)
 8048f75:	e8 76 fc ff ff       	call   8048bf0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048f7a:	89 04 24             	mov    %eax,(%esp)
 8048f7d:	e8 1e fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048f82:	c7 44 24 04 a8 9b 04 	movl   $0x8049ba8,0x4(%esp)
 8048f89:	08 
 8048f8a:	89 04 24             	mov    %eax,(%esp)
 8048f8d:	e8 5e fc ff ff       	call   8048bf0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 8048f92:	89 04 24             	mov    %eax,(%esp)
 8048f95:	e8 06 fd ff ff       	call   8048ca0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 8048f9a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8048fa1:	e8 3a fd ff ff       	call   8048ce0 <exit@plt>
 8048fa6:	66 90                	xchg   %ax,%ax
 8048fa8:	66 90                	xchg   %ax,%ax
 8048faa:	66 90                	xchg   %ax,%ax
 8048fac:	66 90                	xchg   %ax,%ax
 8048fae:	66 90                	xchg   %ax,%ax

08048fb0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()>:
 8048fb0:	55                   	push   %ebp
 8048fb1:	89 e5                	mov    %esp,%ebp
 8048fb3:	8b 45 08             	mov    0x8(%ebp),%eax
 8048fb6:	85 c0                	test   %eax,%eax
 8048fb8:	74 0e                	je     8048fc8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()+0x18>
 8048fba:	8b 10                	mov    (%eax),%edx
 8048fbc:	5d                   	pop    %ebp
 8048fbd:	8b 42 04             	mov    0x4(%edx),%eax
 8048fc0:	ff e0                	jmp    *%eax
 8048fc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048fc8:	5d                   	pop    %ebp
 8048fc9:	c3                   	ret    
 8048fca:	66 90                	xchg   %ax,%ax
 8048fcc:	66 90                	xchg   %ax,%ax
 8048fce:	66 90                	xchg   %ax,%ax

08048fd0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()>:
 8048fd0:	55                   	push   %ebp
 8048fd1:	89 e5                	mov    %esp,%ebp
 8048fd3:	8b 45 08             	mov    0x8(%ebp),%eax
 8048fd6:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 8048fdc:	5d                   	pop    %ebp
 8048fdd:	c3                   	ret    
 8048fde:	66 90                	xchg   %ax,%ax

08048fe0 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()>:
 8048fe0:	55                   	push   %ebp
 8048fe1:	89 e5                	mov    %esp,%ebp
 8048fe3:	8b 45 08             	mov    0x8(%ebp),%eax
 8048fe6:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 8048fec:	5d                   	pop    %ebp
 8048fed:	c3                   	ret    
 8048fee:	66 90                	xchg   %ax,%ax

08048ff0 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()>:
 8048ff0:	55                   	push   %ebp
 8048ff1:	89 e5                	mov    %esp,%ebp
 8048ff3:	8b 45 08             	mov    0x8(%ebp),%eax
 8048ff6:	8b 40 0c             	mov    0xc(%eax),%eax
 8048ff9:	8b 10                	mov    (%eax),%edx
 8048ffb:	89 45 08             	mov    %eax,0x8(%ebp)
 8048ffe:	5d                   	pop    %ebp
 8048fff:	8b 02                	mov    (%edx),%eax
 8049001:	ff e0                	jmp    *%eax
 8049003:	66 90                	xchg   %ax,%ax
 8049005:	66 90                	xchg   %ax,%ax
 8049007:	66 90                	xchg   %ax,%ax
 8049009:	66 90                	xchg   %ax,%ax
 804900b:	66 90                	xchg   %ax,%ax
 804900d:	66 90                	xchg   %ax,%ax
 804900f:	90                   	nop

08049010 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()>:
 8049010:	55                   	push   %ebp
 8049011:	89 e5                	mov    %esp,%ebp
 8049013:	8b 45 08             	mov    0x8(%ebp),%eax
 8049016:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 804901c:	5d                   	pop    %ebp
 804901d:	c3                   	ret    
 804901e:	66 90                	xchg   %ax,%ax

08049020 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()>:
 8049020:	55                   	push   %ebp
 8049021:	89 e5                	mov    %esp,%ebp
 8049023:	8b 45 08             	mov    0x8(%ebp),%eax
 8049026:	8b 40 0c             	mov    0xc(%eax),%eax
 8049029:	8b 10                	mov    (%eax),%edx
 804902b:	89 45 08             	mov    %eax,0x8(%ebp)
 804902e:	5d                   	pop    %ebp
 804902f:	8b 02                	mov    (%edx),%eax
 8049031:	ff e0                	jmp    *%eax
 8049033:	66 90                	xchg   %ax,%ax
 8049035:	66 90                	xchg   %ax,%ax
 8049037:	66 90                	xchg   %ax,%ax
 8049039:	66 90                	xchg   %ax,%ax
 804903b:	66 90                	xchg   %ax,%ax
 804903d:	66 90                	xchg   %ax,%ax
 804903f:	90                   	nop

08049040 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()>:
 8049040:	55                   	push   %ebp
 8049041:	89 e5                	mov    %esp,%ebp
 8049043:	8b 45 08             	mov    0x8(%ebp),%eax
 8049046:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 804904c:	5d                   	pop    %ebp
 804904d:	e9 2e fb ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 8049052:	66 90                	xchg   %ax,%ax
 8049054:	66 90                	xchg   %ax,%ax
 8049056:	66 90                	xchg   %ax,%ax
 8049058:	66 90                	xchg   %ax,%ax
 804905a:	66 90                	xchg   %ax,%ax
 804905c:	66 90                	xchg   %ax,%ax
 804905e:	66 90                	xchg   %ax,%ax

08049060 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()>:
 8049060:	55                   	push   %ebp
 8049061:	89 e5                	mov    %esp,%ebp
 8049063:	8b 45 08             	mov    0x8(%ebp),%eax
 8049066:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 804906c:	5d                   	pop    %ebp
 804906d:	e9 0e fb ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 8049072:	66 90                	xchg   %ax,%ax
 8049074:	66 90                	xchg   %ax,%ax
 8049076:	66 90                	xchg   %ax,%ax
 8049078:	66 90                	xchg   %ax,%ax
 804907a:	66 90                	xchg   %ax,%ax
 804907c:	66 90                	xchg   %ax,%ax
 804907e:	66 90                	xchg   %ax,%ax

08049080 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()>:
 8049080:	55                   	push   %ebp
 8049081:	89 e5                	mov    %esp,%ebp
 8049083:	8b 45 08             	mov    0x8(%ebp),%eax
 8049086:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 804908c:	5d                   	pop    %ebp
 804908d:	e9 ee fa ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 8049092:	66 90                	xchg   %ax,%ax
 8049094:	66 90                	xchg   %ax,%ax
 8049096:	66 90                	xchg   %ax,%ax
 8049098:	66 90                	xchg   %ax,%ax
 804909a:	66 90                	xchg   %ax,%ax
 804909c:	66 90                	xchg   %ax,%ax
 804909e:	66 90                	xchg   %ax,%ax

080490a0 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()>:
 80490a0:	55                   	push   %ebp
 80490a1:	89 e5                	mov    %esp,%ebp
 80490a3:	8b 45 08             	mov    0x8(%ebp),%eax
 80490a6:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 80490ac:	5d                   	pop    %ebp
 80490ad:	e9 ce fa ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 80490b2:	66 90                	xchg   %ax,%ax
 80490b4:	66 90                	xchg   %ax,%ax
 80490b6:	66 90                	xchg   %ax,%ax
 80490b8:	66 90                	xchg   %ax,%ax
 80490ba:	66 90                	xchg   %ax,%ax
 80490bc:	66 90                	xchg   %ax,%ax
 80490be:	66 90                	xchg   %ax,%ax

080490c0 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()>:
 80490c0:	55                   	push   %ebp
 80490c1:	89 e5                	mov    %esp,%ebp
 80490c3:	8b 45 08             	mov    0x8(%ebp),%eax
 80490c6:	c7 00 10 9f 04 08    	movl   $0x8049f10,(%eax)
 80490cc:	5d                   	pop    %ebp
 80490cd:	e9 ae fa ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 80490d2:	66 90                	xchg   %ax,%ax
 80490d4:	66 90                	xchg   %ax,%ax
 80490d6:	66 90                	xchg   %ax,%ax
 80490d8:	66 90                	xchg   %ax,%ax
 80490da:	66 90                	xchg   %ax,%ax
 80490dc:	66 90                	xchg   %ax,%ax
 80490de:	66 90                	xchg   %ax,%ax

080490e0 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)>:
 80490e0:	55                   	push   %ebp
 80490e1:	89 e5                	mov    %esp,%ebp
 80490e3:	8b 45 0c             	mov    0xc(%ebp),%eax
 80490e6:	57                   	push   %edi
 80490e7:	56                   	push   %esi
 80490e8:	8b 70 04             	mov    0x4(%eax),%esi
 80490eb:	81 fe ac 9d 04 08    	cmp    $0x8049dac,%esi
 80490f1:	74 1d                	je     8049110 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)+0x30>
 80490f3:	31 c0                	xor    %eax,%eax
 80490f5:	80 3e 2a             	cmpb   $0x2a,(%esi)
 80490f8:	74 0e                	je     8049108 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)+0x28>
 80490fa:	bf ac 9d 04 08       	mov    $0x8049dac,%edi
 80490ff:	b9 18 00 00 00       	mov    $0x18,%ecx
 8049104:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 8049106:	74 08                	je     8049110 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)+0x30>
 8049108:	5e                   	pop    %esi
 8049109:	5f                   	pop    %edi
 804910a:	5d                   	pop    %ebp
 804910b:	c3                   	ret    
 804910c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049110:	8b 45 08             	mov    0x8(%ebp),%eax
 8049113:	5e                   	pop    %esi
 8049114:	5f                   	pop    %edi
 8049115:	5d                   	pop    %ebp
 8049116:	83 c0 10             	add    $0x10,%eax
 8049119:	c3                   	ret    
 804911a:	66 90                	xchg   %ax,%ax
 804911c:	66 90                	xchg   %ax,%ax
 804911e:	66 90                	xchg   %ax,%ax

08049120 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)>:
 8049120:	55                   	push   %ebp
 8049121:	89 e5                	mov    %esp,%ebp
 8049123:	8b 45 0c             	mov    0xc(%ebp),%eax
 8049126:	57                   	push   %edi
 8049127:	56                   	push   %esi
 8049128:	8b 70 04             	mov    0x4(%eax),%esi
 804912b:	81 fe ac 9d 04 08    	cmp    $0x8049dac,%esi
 8049131:	74 1d                	je     8049150 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)+0x30>
 8049133:	31 c0                	xor    %eax,%eax
 8049135:	80 3e 2a             	cmpb   $0x2a,(%esi)
 8049138:	74 0e                	je     8049148 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)+0x28>
 804913a:	bf ac 9d 04 08       	mov    $0x8049dac,%edi
 804913f:	b9 18 00 00 00       	mov    $0x18,%ecx
 8049144:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
 8049146:	74 08                	je     8049150 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)+0x30>
 8049148:	5e                   	pop    %esi
 8049149:	5f                   	pop    %edi
 804914a:	5d                   	pop    %ebp
 804914b:	c3                   	ret    
 804914c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049150:	8b 45 08             	mov    0x8(%ebp),%eax
 8049153:	5e                   	pop    %esi
 8049154:	5f                   	pop    %edi
 8049155:	5d                   	pop    %ebp
 8049156:	83 c0 10             	add    $0x10,%eax
 8049159:	c3                   	ret    
 804915a:	66 90                	xchg   %ax,%ax
 804915c:	66 90                	xchg   %ax,%ax
 804915e:	66 90                	xchg   %ax,%ax

08049160 <std::thread::_Impl_base::~_Impl_base()>:
 8049160:	55                   	push   %ebp
 8049161:	89 e5                	mov    %esp,%ebp
 8049163:	56                   	push   %esi
 8049164:	53                   	push   %ebx
 8049165:	83 ec 10             	sub    $0x10,%esp
 8049168:	8b 45 08             	mov    0x8(%ebp),%eax
 804916b:	8b 58 08             	mov    0x8(%eax),%ebx
 804916e:	c7 00 30 9f 04 08    	movl   $0x8049f30,(%eax)
 8049174:	85 db                	test   %ebx,%ebx
 8049176:	74 1c                	je     8049194 <std::thread::_Impl_base::~_Impl_base()+0x34>
 8049178:	be b0 8c 04 08       	mov    $0x8048cb0,%esi
 804917d:	85 f6                	test   %esi,%esi
 804917f:	8d 43 04             	lea    0x4(%ebx),%eax
 8049182:	74 4b                	je     80491cf <std::thread::_Impl_base::~_Impl_base()+0x6f>
 8049184:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 8049189:	f0 0f c1 10          	lock xadd %edx,(%eax)
 804918d:	89 d0                	mov    %edx,%eax
 804918f:	83 f8 01             	cmp    $0x1,%eax
 8049192:	74 0c                	je     80491a0 <std::thread::_Impl_base::~_Impl_base()+0x40>
 8049194:	83 c4 10             	add    $0x10,%esp
 8049197:	5b                   	pop    %ebx
 8049198:	5e                   	pop    %esi
 8049199:	5d                   	pop    %ebp
 804919a:	c3                   	ret    
 804919b:	90                   	nop
 804919c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80491a0:	8b 03                	mov    (%ebx),%eax
 80491a2:	89 1c 24             	mov    %ebx,(%esp)
 80491a5:	ff 50 08             	call   *0x8(%eax)
 80491a8:	85 f6                	test   %esi,%esi
 80491aa:	8d 43 08             	lea    0x8(%ebx),%eax
 80491ad:	74 2b                	je     80491da <std::thread::_Impl_base::~_Impl_base()+0x7a>
 80491af:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 80491b4:	f0 0f c1 10          	lock xadd %edx,(%eax)
 80491b8:	89 d0                	mov    %edx,%eax
 80491ba:	83 f8 01             	cmp    $0x1,%eax
 80491bd:	75 d5                	jne    8049194 <std::thread::_Impl_base::~_Impl_base()+0x34>
 80491bf:	8b 03                	mov    (%ebx),%eax
 80491c1:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80491c4:	8b 40 0c             	mov    0xc(%eax),%eax
 80491c7:	83 c4 10             	add    $0x10,%esp
 80491ca:	5b                   	pop    %ebx
 80491cb:	5e                   	pop    %esi
 80491cc:	5d                   	pop    %ebp
 80491cd:	ff e0                	jmp    *%eax
 80491cf:	8b 43 04             	mov    0x4(%ebx),%eax
 80491d2:	8d 50 ff             	lea    -0x1(%eax),%edx
 80491d5:	89 53 04             	mov    %edx,0x4(%ebx)
 80491d8:	eb b5                	jmp    804918f <std::thread::_Impl_base::~_Impl_base()+0x2f>
 80491da:	8b 43 08             	mov    0x8(%ebx),%eax
 80491dd:	8d 50 ff             	lea    -0x1(%eax),%edx
 80491e0:	89 53 08             	mov    %edx,0x8(%ebx)
 80491e3:	eb d5                	jmp    80491ba <std::thread::_Impl_base::~_Impl_base()+0x5a>
 80491e5:	66 90                	xchg   %ax,%ax
 80491e7:	66 90                	xchg   %ax,%ax
 80491e9:	66 90                	xchg   %ax,%ax
 80491eb:	66 90                	xchg   %ax,%ax
 80491ed:	66 90                	xchg   %ax,%ax
 80491ef:	90                   	nop

080491f0 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()>:
 80491f0:	55                   	push   %ebp
 80491f1:	89 e5                	mov    %esp,%ebp
 80491f3:	56                   	push   %esi
 80491f4:	53                   	push   %ebx
 80491f5:	83 ec 10             	sub    $0x10,%esp
 80491f8:	8b 45 08             	mov    0x8(%ebp),%eax
 80491fb:	8b 58 08             	mov    0x8(%eax),%ebx
 80491fe:	c7 00 30 9f 04 08    	movl   $0x8049f30,(%eax)
 8049204:	85 db                	test   %ebx,%ebx
 8049206:	74 1c                	je     8049224 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x34>
 8049208:	be b0 8c 04 08       	mov    $0x8048cb0,%esi
 804920d:	85 f6                	test   %esi,%esi
 804920f:	8d 43 04             	lea    0x4(%ebx),%eax
 8049212:	74 4b                	je     804925f <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x6f>
 8049214:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 8049219:	f0 0f c1 10          	lock xadd %edx,(%eax)
 804921d:	89 d0                	mov    %edx,%eax
 804921f:	83 f8 01             	cmp    $0x1,%eax
 8049222:	74 0c                	je     8049230 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x40>
 8049224:	83 c4 10             	add    $0x10,%esp
 8049227:	5b                   	pop    %ebx
 8049228:	5e                   	pop    %esi
 8049229:	5d                   	pop    %ebp
 804922a:	c3                   	ret    
 804922b:	90                   	nop
 804922c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049230:	8b 03                	mov    (%ebx),%eax
 8049232:	89 1c 24             	mov    %ebx,(%esp)
 8049235:	ff 50 08             	call   *0x8(%eax)
 8049238:	85 f6                	test   %esi,%esi
 804923a:	8d 43 08             	lea    0x8(%ebx),%eax
 804923d:	74 2b                	je     804926a <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x7a>
 804923f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 8049244:	f0 0f c1 10          	lock xadd %edx,(%eax)
 8049248:	89 d0                	mov    %edx,%eax
 804924a:	83 f8 01             	cmp    $0x1,%eax
 804924d:	75 d5                	jne    8049224 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x34>
 804924f:	8b 03                	mov    (%ebx),%eax
 8049251:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8049254:	8b 40 0c             	mov    0xc(%eax),%eax
 8049257:	83 c4 10             	add    $0x10,%esp
 804925a:	5b                   	pop    %ebx
 804925b:	5e                   	pop    %esi
 804925c:	5d                   	pop    %ebp
 804925d:	ff e0                	jmp    *%eax
 804925f:	8b 43 04             	mov    0x4(%ebx),%eax
 8049262:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049265:	89 53 04             	mov    %edx,0x4(%ebx)
 8049268:	eb b5                	jmp    804921f <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x2f>
 804926a:	8b 43 08             	mov    0x8(%ebx),%eax
 804926d:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049270:	89 53 08             	mov    %edx,0x8(%ebx)
 8049273:	eb d5                	jmp    804924a <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x5a>
 8049275:	66 90                	xchg   %ax,%ax
 8049277:	66 90                	xchg   %ax,%ax
 8049279:	66 90                	xchg   %ax,%ax
 804927b:	66 90                	xchg   %ax,%ax
 804927d:	66 90                	xchg   %ax,%ax
 804927f:	90                   	nop

08049280 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()>:
 8049280:	55                   	push   %ebp
 8049281:	89 e5                	mov    %esp,%ebp
 8049283:	56                   	push   %esi
 8049284:	53                   	push   %ebx
 8049285:	83 ec 10             	sub    $0x10,%esp
 8049288:	8b 45 08             	mov    0x8(%ebp),%eax
 804928b:	8b 58 08             	mov    0x8(%eax),%ebx
 804928e:	c7 00 30 9f 04 08    	movl   $0x8049f30,(%eax)
 8049294:	85 db                	test   %ebx,%ebx
 8049296:	74 1c                	je     80492b4 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x34>
 8049298:	be b0 8c 04 08       	mov    $0x8048cb0,%esi
 804929d:	85 f6                	test   %esi,%esi
 804929f:	8d 43 04             	lea    0x4(%ebx),%eax
 80492a2:	74 4b                	je     80492ef <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x6f>
 80492a4:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 80492a9:	f0 0f c1 10          	lock xadd %edx,(%eax)
 80492ad:	89 d0                	mov    %edx,%eax
 80492af:	83 f8 01             	cmp    $0x1,%eax
 80492b2:	74 0c                	je     80492c0 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x40>
 80492b4:	83 c4 10             	add    $0x10,%esp
 80492b7:	5b                   	pop    %ebx
 80492b8:	5e                   	pop    %esi
 80492b9:	5d                   	pop    %ebp
 80492ba:	c3                   	ret    
 80492bb:	90                   	nop
 80492bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80492c0:	8b 03                	mov    (%ebx),%eax
 80492c2:	89 1c 24             	mov    %ebx,(%esp)
 80492c5:	ff 50 08             	call   *0x8(%eax)
 80492c8:	85 f6                	test   %esi,%esi
 80492ca:	8d 43 08             	lea    0x8(%ebx),%eax
 80492cd:	74 2b                	je     80492fa <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x7a>
 80492cf:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 80492d4:	f0 0f c1 10          	lock xadd %edx,(%eax)
 80492d8:	89 d0                	mov    %edx,%eax
 80492da:	83 f8 01             	cmp    $0x1,%eax
 80492dd:	75 d5                	jne    80492b4 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x34>
 80492df:	8b 03                	mov    (%ebx),%eax
 80492e1:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80492e4:	8b 40 0c             	mov    0xc(%eax),%eax
 80492e7:	83 c4 10             	add    $0x10,%esp
 80492ea:	5b                   	pop    %ebx
 80492eb:	5e                   	pop    %esi
 80492ec:	5d                   	pop    %ebp
 80492ed:	ff e0                	jmp    *%eax
 80492ef:	8b 43 04             	mov    0x4(%ebx),%eax
 80492f2:	8d 50 ff             	lea    -0x1(%eax),%edx
 80492f5:	89 53 04             	mov    %edx,0x4(%ebx)
 80492f8:	eb b5                	jmp    80492af <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x2f>
 80492fa:	8b 43 08             	mov    0x8(%ebx),%eax
 80492fd:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049300:	89 53 08             	mov    %edx,0x8(%ebx)
 8049303:	eb d5                	jmp    80492da <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x5a>
 8049305:	66 90                	xchg   %ax,%ax
 8049307:	66 90                	xchg   %ax,%ax
 8049309:	66 90                	xchg   %ax,%ax
 804930b:	66 90                	xchg   %ax,%ax
 804930d:	66 90                	xchg   %ax,%ax
 804930f:	90                   	nop

08049310 <std::thread::_Impl_base::~_Impl_base()>:
 8049310:	55                   	push   %ebp
 8049311:	89 e5                	mov    %esp,%ebp
 8049313:	57                   	push   %edi
 8049314:	56                   	push   %esi
 8049315:	53                   	push   %ebx
 8049316:	83 ec 1c             	sub    $0x1c,%esp
 8049319:	8b 5d 08             	mov    0x8(%ebp),%ebx
 804931c:	8b 73 08             	mov    0x8(%ebx),%esi
 804931f:	c7 03 30 9f 04 08    	movl   $0x8049f30,(%ebx)
 8049325:	85 f6                	test   %esi,%esi
 8049327:	74 1c                	je     8049345 <std::thread::_Impl_base::~_Impl_base()+0x35>
 8049329:	bf b0 8c 04 08       	mov    $0x8048cb0,%edi
 804932e:	85 ff                	test   %edi,%edi
 8049330:	8d 46 04             	lea    0x4(%esi),%eax
 8049333:	74 4c                	je     8049381 <std::thread::_Impl_base::~_Impl_base()+0x71>
 8049335:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 804933a:	f0 0f c1 10          	lock xadd %edx,(%eax)
 804933e:	89 d0                	mov    %edx,%eax
 8049340:	83 f8 01             	cmp    $0x1,%eax
 8049343:	74 13                	je     8049358 <std::thread::_Impl_base::~_Impl_base()+0x48>
 8049345:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8049348:	83 c4 1c             	add    $0x1c,%esp
 804934b:	5b                   	pop    %ebx
 804934c:	5e                   	pop    %esi
 804934d:	5f                   	pop    %edi
 804934e:	5d                   	pop    %ebp
 804934f:	e9 2c f8 ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 8049354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049358:	8b 06                	mov    (%esi),%eax
 804935a:	89 34 24             	mov    %esi,(%esp)
 804935d:	ff 50 08             	call   *0x8(%eax)
 8049360:	85 ff                	test   %edi,%edi
 8049362:	8d 46 08             	lea    0x8(%esi),%eax
 8049365:	74 25                	je     804938c <std::thread::_Impl_base::~_Impl_base()+0x7c>
 8049367:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 804936c:	f0 0f c1 10          	lock xadd %edx,(%eax)
 8049370:	89 d0                	mov    %edx,%eax
 8049372:	83 f8 01             	cmp    $0x1,%eax
 8049375:	75 ce                	jne    8049345 <std::thread::_Impl_base::~_Impl_base()+0x35>
 8049377:	8b 06                	mov    (%esi),%eax
 8049379:	89 34 24             	mov    %esi,(%esp)
 804937c:	ff 50 0c             	call   *0xc(%eax)
 804937f:	eb c4                	jmp    8049345 <std::thread::_Impl_base::~_Impl_base()+0x35>
 8049381:	8b 46 04             	mov    0x4(%esi),%eax
 8049384:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049387:	89 56 04             	mov    %edx,0x4(%esi)
 804938a:	eb b4                	jmp    8049340 <std::thread::_Impl_base::~_Impl_base()+0x30>
 804938c:	8b 46 08             	mov    0x8(%esi),%eax
 804938f:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049392:	89 56 08             	mov    %edx,0x8(%esi)
 8049395:	eb db                	jmp    8049372 <std::thread::_Impl_base::~_Impl_base()+0x62>
 8049397:	66 90                	xchg   %ax,%ax
 8049399:	66 90                	xchg   %ax,%ax
 804939b:	66 90                	xchg   %ax,%ax
 804939d:	66 90                	xchg   %ax,%ax
 804939f:	90                   	nop

080493a0 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()>:
 80493a0:	55                   	push   %ebp
 80493a1:	89 e5                	mov    %esp,%ebp
 80493a3:	57                   	push   %edi
 80493a4:	56                   	push   %esi
 80493a5:	53                   	push   %ebx
 80493a6:	83 ec 1c             	sub    $0x1c,%esp
 80493a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
 80493ac:	8b 73 08             	mov    0x8(%ebx),%esi
 80493af:	c7 03 30 9f 04 08    	movl   $0x8049f30,(%ebx)
 80493b5:	85 f6                	test   %esi,%esi
 80493b7:	74 1c                	je     80493d5 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x35>
 80493b9:	bf b0 8c 04 08       	mov    $0x8048cb0,%edi
 80493be:	85 ff                	test   %edi,%edi
 80493c0:	8d 46 04             	lea    0x4(%esi),%eax
 80493c3:	74 4c                	je     8049411 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x71>
 80493c5:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 80493ca:	f0 0f c1 10          	lock xadd %edx,(%eax)
 80493ce:	89 d0                	mov    %edx,%eax
 80493d0:	83 f8 01             	cmp    $0x1,%eax
 80493d3:	74 13                	je     80493e8 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x48>
 80493d5:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80493d8:	83 c4 1c             	add    $0x1c,%esp
 80493db:	5b                   	pop    %ebx
 80493dc:	5e                   	pop    %esi
 80493dd:	5f                   	pop    %edi
 80493de:	5d                   	pop    %ebp
 80493df:	e9 9c f7 ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 80493e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80493e8:	8b 06                	mov    (%esi),%eax
 80493ea:	89 34 24             	mov    %esi,(%esp)
 80493ed:	ff 50 08             	call   *0x8(%eax)
 80493f0:	85 ff                	test   %edi,%edi
 80493f2:	8d 46 08             	lea    0x8(%esi),%eax
 80493f5:	74 25                	je     804941c <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x7c>
 80493f7:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 80493fc:	f0 0f c1 10          	lock xadd %edx,(%eax)
 8049400:	89 d0                	mov    %edx,%eax
 8049402:	83 f8 01             	cmp    $0x1,%eax
 8049405:	75 ce                	jne    80493d5 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x35>
 8049407:	8b 06                	mov    (%esi),%eax
 8049409:	89 34 24             	mov    %esi,(%esp)
 804940c:	ff 50 0c             	call   *0xc(%eax)
 804940f:	eb c4                	jmp    80493d5 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x35>
 8049411:	8b 46 04             	mov    0x4(%esi),%eax
 8049414:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049417:	89 56 04             	mov    %edx,0x4(%esi)
 804941a:	eb b4                	jmp    80493d0 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x30>
 804941c:	8b 46 08             	mov    0x8(%esi),%eax
 804941f:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049422:	89 56 08             	mov    %edx,0x8(%esi)
 8049425:	eb db                	jmp    8049402 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x62>
 8049427:	66 90                	xchg   %ax,%ax
 8049429:	66 90                	xchg   %ax,%ax
 804942b:	66 90                	xchg   %ax,%ax
 804942d:	66 90                	xchg   %ax,%ax
 804942f:	90                   	nop

08049430 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()>:
 8049430:	55                   	push   %ebp
 8049431:	89 e5                	mov    %esp,%ebp
 8049433:	57                   	push   %edi
 8049434:	56                   	push   %esi
 8049435:	53                   	push   %ebx
 8049436:	83 ec 1c             	sub    $0x1c,%esp
 8049439:	8b 5d 08             	mov    0x8(%ebp),%ebx
 804943c:	8b 73 08             	mov    0x8(%ebx),%esi
 804943f:	c7 03 30 9f 04 08    	movl   $0x8049f30,(%ebx)
 8049445:	85 f6                	test   %esi,%esi
 8049447:	74 1c                	je     8049465 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x35>
 8049449:	bf b0 8c 04 08       	mov    $0x8048cb0,%edi
 804944e:	85 ff                	test   %edi,%edi
 8049450:	8d 46 04             	lea    0x4(%esi),%eax
 8049453:	74 4c                	je     80494a1 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x71>
 8049455:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 804945a:	f0 0f c1 10          	lock xadd %edx,(%eax)
 804945e:	89 d0                	mov    %edx,%eax
 8049460:	83 f8 01             	cmp    $0x1,%eax
 8049463:	74 13                	je     8049478 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x48>
 8049465:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8049468:	83 c4 1c             	add    $0x1c,%esp
 804946b:	5b                   	pop    %ebx
 804946c:	5e                   	pop    %esi
 804946d:	5f                   	pop    %edi
 804946e:	5d                   	pop    %ebp
 804946f:	e9 0c f7 ff ff       	jmp    8048b80 <operator delete(void*)@plt>
 8049474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049478:	8b 06                	mov    (%esi),%eax
 804947a:	89 34 24             	mov    %esi,(%esp)
 804947d:	ff 50 08             	call   *0x8(%eax)
 8049480:	85 ff                	test   %edi,%edi
 8049482:	8d 46 08             	lea    0x8(%esi),%eax
 8049485:	74 25                	je     80494ac <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x7c>
 8049487:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 804948c:	f0 0f c1 10          	lock xadd %edx,(%eax)
 8049490:	89 d0                	mov    %edx,%eax
 8049492:	83 f8 01             	cmp    $0x1,%eax
 8049495:	75 ce                	jne    8049465 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x35>
 8049497:	8b 06                	mov    (%esi),%eax
 8049499:	89 34 24             	mov    %esi,(%esp)
 804949c:	ff 50 0c             	call   *0xc(%eax)
 804949f:	eb c4                	jmp    8049465 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x35>
 80494a1:	8b 46 04             	mov    0x4(%esi),%eax
 80494a4:	8d 50 ff             	lea    -0x1(%eax),%edx
 80494a7:	89 56 04             	mov    %edx,0x4(%esi)
 80494aa:	eb b4                	jmp    8049460 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x30>
 80494ac:	8b 46 08             	mov    0x8(%esi),%eax
 80494af:	8d 50 ff             	lea    -0x1(%eax),%edx
 80494b2:	89 56 08             	mov    %edx,0x8(%esi)
 80494b5:	eb db                	jmp    8049492 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::~_Impl()+0x62>
 80494b7:	66 90                	xchg   %ax,%ax
 80494b9:	66 90                	xchg   %ax,%ax
 80494bb:	66 90                	xchg   %ax,%ax
 80494bd:	66 90                	xchg   %ax,%ax
 80494bf:	90                   	nop

080494c0 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::_M_run()>:
 80494c0:	55                   	push   %ebp
 80494c1:	b9 01 00 00 00       	mov    $0x1,%ecx
 80494c6:	89 e5                	mov    %esp,%ebp
 80494c8:	57                   	push   %edi
 80494c9:	56                   	push   %esi
 80494ca:	53                   	push   %ebx
 80494cb:	83 ec 1c             	sub    $0x1c,%esp
 80494ce:	8b 5d 08             	mov    0x8(%ebp),%ebx
 80494d1:	8b 43 0c             	mov    0xc(%ebx),%eax
 80494d4:	86 08                	xchg   %cl,(%eax)
 80494d6:	8d 45 e0             	lea    -0x20(%ebp),%eax
 80494d9:	89 04 24             	mov    %eax,(%esp)
 80494dc:	e8 cf f6 ff ff       	call   8048bb0 <std::chrono::_V2::system_clock::now()@plt>
 80494e1:	8b 75 e0             	mov    -0x20(%ebp),%esi
 80494e4:	8b 7d e4             	mov    -0x1c(%ebp),%edi
 80494e7:	83 ec 04             	sub    $0x4,%esp
 80494ea:	81 c6 00 f2 05 2a    	add    $0x2a05f200,%esi
 80494f0:	83 d7 01             	adc    $0x1,%edi
 80494f3:	90                   	nop
 80494f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80494f8:	8b 43 0c             	mov    0xc(%ebx),%eax
 80494fb:	0f b6 00             	movzbl (%eax),%eax
 80494fe:	84 c0                	test   %al,%al
 8049500:	74 3e                	je     8049540 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::_M_run()+0x80>
 8049502:	e8 69 f6 ff ff       	call   8048b70 <sched_yield@plt>
 8049507:	8d 45 e0             	lea    -0x20(%ebp),%eax
 804950a:	89 04 24             	mov    %eax,(%esp)
 804950d:	e8 9e f6 ff ff       	call   8048bb0 <std::chrono::_V2::system_clock::now()@plt>
 8049512:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 8049515:	8b 4d e0             	mov    -0x20(%ebp),%ecx
 8049518:	83 ec 04             	sub    $0x4,%esp
 804951b:	39 c7                	cmp    %eax,%edi
 804951d:	7f d9                	jg     80494f8 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::_M_run()+0x38>
 804951f:	7d 07                	jge    8049528 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::_M_run()+0x68>
 8049521:	e8 aa f9 ff ff       	call   8048ed0 <explotar()>
 8049526:	66 90                	xchg   %ax,%ax
 8049528:	39 ce                	cmp    %ecx,%esi
 804952a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8049530:	72 ef                	jb     8049521 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::_M_run()+0x61>
 8049532:	8b 43 0c             	mov    0xc(%ebx),%eax
 8049535:	0f b6 00             	movzbl (%eax),%eax
 8049538:	84 c0                	test   %al,%al
 804953a:	75 c6                	jne    8049502 <std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >::_M_run()+0x42>
 804953c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049540:	8d 65 f4             	lea    -0xc(%ebp),%esp
 8049543:	5b                   	pop    %ebx
 8049544:	5e                   	pop    %esi
 8049545:	5f                   	pop    %edi
 8049546:	5d                   	pop    %ebp
 8049547:	c3                   	ret    
 8049548:	66 90                	xchg   %ax,%ax
 804954a:	66 90                	xchg   %ax,%ax
 804954c:	66 90                	xchg   %ax,%ax
 804954e:	66 90                	xchg   %ax,%ax

08049550 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::_M_run()>:
 8049550:	55                   	push   %ebp
 8049551:	b9 01 00 00 00       	mov    $0x1,%ecx
 8049556:	89 e5                	mov    %esp,%ebp
 8049558:	57                   	push   %edi
 8049559:	56                   	push   %esi
 804955a:	53                   	push   %ebx
 804955b:	83 ec 1c             	sub    $0x1c,%esp
 804955e:	8b 5d 08             	mov    0x8(%ebp),%ebx
 8049561:	8b 43 0c             	mov    0xc(%ebx),%eax
 8049564:	86 08                	xchg   %cl,(%eax)
 8049566:	8d 45 e0             	lea    -0x20(%ebp),%eax
 8049569:	89 04 24             	mov    %eax,(%esp)
 804956c:	e8 3f f6 ff ff       	call   8048bb0 <std::chrono::_V2::system_clock::now()@plt>
 8049571:	8b 75 e0             	mov    -0x20(%ebp),%esi
 8049574:	8b 7d e4             	mov    -0x1c(%ebp),%edi
 8049577:	83 ec 04             	sub    $0x4,%esp
 804957a:	81 c6 00 f2 05 2a    	add    $0x2a05f200,%esi
 8049580:	83 d7 01             	adc    $0x1,%edi
 8049583:	90                   	nop
 8049584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8049588:	8b 43 0c             	mov    0xc(%ebx),%eax
 804958b:	0f b6 00             	movzbl (%eax),%eax
 804958e:	84 c0                	test   %al,%al
 8049590:	74 3e                	je     80495d0 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::_M_run()+0x80>
 8049592:	e8 d9 f5 ff ff       	call   8048b70 <sched_yield@plt>
 8049597:	8d 45 e0             	lea    -0x20(%ebp),%eax
 804959a:	89 04 24             	mov    %eax,(%esp)
 804959d:	e8 0e f6 ff ff       	call   8048bb0 <std::chrono::_V2::system_clock::now()@plt>
 80495a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80495a5:	8b 4d e0             	mov    -0x20(%ebp),%ecx
 80495a8:	83 ec 04             	sub    $0x4,%esp
 80495ab:	39 c7                	cmp    %eax,%edi
 80495ad:	7f d9                	jg     8049588 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::_M_run()+0x38>
 80495af:	7d 07                	jge    80495b8 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::_M_run()+0x68>
 80495b1:	e8 1a f9 ff ff       	call   8048ed0 <explotar()>
 80495b6:	66 90                	xchg   %ax,%ax
 80495b8:	39 ce                	cmp    %ecx,%esi
 80495ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 80495c0:	72 ef                	jb     80495b1 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::_M_run()+0x61>
 80495c2:	8b 43 0c             	mov    0xc(%ebx),%eax
 80495c5:	0f b6 00             	movzbl (%eax),%eax
 80495c8:	84 c0                	test   %al,%al
 80495ca:	75 c6                	jne    8049592 <std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >::_M_run()+0x42>
 80495cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80495d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80495d3:	5b                   	pop    %ebx
 80495d4:	5e                   	pop    %esi
 80495d5:	5f                   	pop    %edi
 80495d6:	5d                   	pop    %ebp
 80495d7:	c3                   	ret    
 80495d8:	66 90                	xchg   %ax,%ax
 80495da:	66 90                	xchg   %ax,%ax
 80495dc:	66 90                	xchg   %ax,%ax
 80495de:	66 90                	xchg   %ax,%ax

080495e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>:
 80495e0:	55                   	push   %ebp
 80495e1:	89 e5                	mov    %esp,%ebp
 80495e3:	56                   	push   %esi
 80495e4:	be b0 8c 04 08       	mov    $0x8048cb0,%esi
 80495e9:	53                   	push   %ebx
 80495ea:	83 ec 10             	sub    $0x10,%esp
 80495ed:	8b 5d 08             	mov    0x8(%ebp),%ebx
 80495f0:	85 f6                	test   %esi,%esi
 80495f2:	8d 43 04             	lea    0x4(%ebx),%eax
 80495f5:	74 48                	je     804963f <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x5f>
 80495f7:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 80495fc:	f0 0f c1 10          	lock xadd %edx,(%eax)
 8049600:	89 d0                	mov    %edx,%eax
 8049602:	83 f8 01             	cmp    $0x1,%eax
 8049605:	74 09                	je     8049610 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x30>
 8049607:	83 c4 10             	add    $0x10,%esp
 804960a:	5b                   	pop    %ebx
 804960b:	5e                   	pop    %esi
 804960c:	5d                   	pop    %ebp
 804960d:	c3                   	ret    
 804960e:	66 90                	xchg   %ax,%ax
 8049610:	8b 03                	mov    (%ebx),%eax
 8049612:	89 1c 24             	mov    %ebx,(%esp)
 8049615:	ff 50 08             	call   *0x8(%eax)
 8049618:	85 f6                	test   %esi,%esi
 804961a:	8d 43 08             	lea    0x8(%ebx),%eax
 804961d:	74 2b                	je     804964a <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x6a>
 804961f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
 8049624:	f0 0f c1 10          	lock xadd %edx,(%eax)
 8049628:	89 d0                	mov    %edx,%eax
 804962a:	83 f8 01             	cmp    $0x1,%eax
 804962d:	75 d8                	jne    8049607 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x27>
 804962f:	8b 03                	mov    (%ebx),%eax
 8049631:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8049634:	8b 40 0c             	mov    0xc(%eax),%eax
 8049637:	83 c4 10             	add    $0x10,%esp
 804963a:	5b                   	pop    %ebx
 804963b:	5e                   	pop    %esi
 804963c:	5d                   	pop    %ebp
 804963d:	ff e0                	jmp    *%eax
 804963f:	8b 43 04             	mov    0x4(%ebx),%eax
 8049642:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049645:	89 53 04             	mov    %edx,0x4(%ebx)
 8049648:	eb b8                	jmp    8049602 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x22>
 804964a:	8b 43 08             	mov    0x8(%ebx),%eax
 804964d:	8d 50 ff             	lea    -0x1(%eax),%edx
 8049650:	89 53 08             	mov    %edx,0x8(%ebx)
 8049653:	eb d5                	jmp    804962a <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()+0x4a>
 8049655:	66 90                	xchg   %ax,%ax
 8049657:	66 90                	xchg   %ax,%ax
 8049659:	66 90                	xchg   %ax,%ax
 804965b:	66 90                	xchg   %ax,%ax
 804965d:	66 90                	xchg   %ax,%ax
 804965f:	90                   	nop

08049660 <void comparar<int>(int const&, char const*)>:
 8049660:	55                   	push   %ebp
 8049661:	89 e5                	mov    %esp,%ebp
 8049663:	57                   	push   %edi
 8049664:	56                   	push   %esi
 8049665:	53                   	push   %ebx
 8049666:	83 ec 2c             	sub    $0x2c,%esp
 8049669:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 804966c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
 8049673:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 804967a:	e8 f1 f5 ff ff       	call   8048c70 <operator new(unsigned int)@plt>
 804967f:	85 c0                	test   %eax,%eax
 8049681:	89 c6                	mov    %eax,%esi
 8049683:	0f 84 87 01 00 00    	je     8049810 <void comparar<int>(int const&, char const*)+0x1b0>
 8049689:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
 8049690:	8d 40 10             	lea    0x10(%eax),%eax
 8049693:	c7 40 f8 01 00 00 00 	movl   $0x1,-0x8(%eax)
 804969a:	c7 40 f0 98 9f 04 08 	movl   $0x8049f98,-0x10(%eax)
 80496a1:	89 46 0c             	mov    %eax,0xc(%esi)
 80496a4:	8d 45 db             	lea    -0x25(%ebp),%eax
 80496a7:	c7 46 14 00 00 00 00 	movl   $0x0,0x14(%esi)
 80496ae:	c7 46 18 00 00 00 00 	movl   $0x0,0x18(%esi)
 80496b5:	c7 46 10 60 9f 04 08 	movl   $0x8049f60,0x10(%esi)
 80496bc:	89 46 1c             	mov    %eax,0x1c(%esi)
 80496bf:	c7 44 24 04 a4 9d 04 	movl   $0x8049da4,0x4(%esp)
 80496c6:	08 
 80496c7:	89 34 24             	mov    %esi,(%esp)
 80496ca:	e8 51 fa ff ff       	call   8049120 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<int>(int const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)>
 80496cf:	89 75 e4             	mov    %esi,-0x1c(%ebp)
 80496d2:	8d 7d dc             	lea    -0x24(%ebp),%edi
 80496d5:	8d 75 e0             	lea    -0x20(%ebp),%esi
 80496d8:	89 74 24 04          	mov    %esi,0x4(%esp)
 80496dc:	89 3c 24             	mov    %edi,(%esp)
 80496df:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80496e2:	e8 e9 f4 ff ff       	call   8048bd0 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)@plt>
 80496e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80496ea:	85 c0                	test   %eax,%eax
 80496ec:	74 22                	je     8049710 <void comparar<int>(int const&, char const*)+0xb0>
 80496ee:	b9 b0 8c 04 08       	mov    $0x8048cb0,%ecx
 80496f3:	85 c9                	test   %ecx,%ecx
 80496f5:	8d 50 04             	lea    0x4(%eax),%edx
 80496f8:	0f 84 3a 01 00 00    	je     8049838 <void comparar<int>(int const&, char const*)+0x1d8>
 80496fe:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049703:	f0 0f c1 0a          	lock xadd %ecx,(%edx)
 8049707:	83 f9 01             	cmp    $0x1,%ecx
 804970a:	0f 84 98 00 00 00    	je     80497a8 <void comparar<int>(int const&, char const*)+0x148>
 8049710:	c7 44 24 08 0b 00 00 	movl   $0xb,0x8(%esp)
 8049717:	00 
 8049718:	c7 44 24 04 2f 9c 04 	movl   $0x8049c2f,0x4(%esp)
 804971f:	08 
 8049720:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8049727:	e8 c4 f5 ff ff       	call   8048cf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)@plt>
 804972c:	85 db                	test   %ebx,%ebx
 804972e:	0f 84 b4 00 00 00    	je     80497e8 <void comparar<int>(int const&, char const*)+0x188>
 8049734:	89 1c 24             	mov    %ebx,(%esp)
 8049737:	e8 e4 f4 ff ff       	call   8048c20 <strlen@plt>
 804973c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 8049740:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8049747:	89 44 24 08          	mov    %eax,0x8(%esp)
 804974b:	e8 a0 f5 ff ff       	call   8048cf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)@plt>
 8049750:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 8049757:	00 
 8049758:	c7 44 24 04 2c 9c 04 	movl   $0x8049c2c,0x4(%esp)
 804975f:	08 
 8049760:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8049767:	e8 84 f5 ff ff       	call   8048cf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)@plt>
 804976c:	89 74 24 04          	mov    %esi,0x4(%esp)
 8049770:	c7 04 24 a0 c0 04 08 	movl   $0x804c0a0,(%esp)
 8049777:	e8 04 f5 ff ff       	call   8048c80 <std::istream::operator>>(int&)@plt>
 804977c:	8b 45 08             	mov    0x8(%ebp),%eax
 804977f:	8b 55 e0             	mov    -0x20(%ebp),%edx
 8049782:	39 10                	cmp    %edx,(%eax)
 8049784:	0f 85 9b 00 00 00    	jne    8049825 <void comparar<int>(int const&, char const*)+0x1c5>
 804978a:	31 c0                	xor    %eax,%eax
 804978c:	86 45 db             	xchg   %al,-0x25(%ebp)
 804978f:	89 3c 24             	mov    %edi,(%esp)
 8049792:	e8 a9 f4 ff ff       	call   8048c40 <std::thread::join()@plt>
 8049797:	8b 45 dc             	mov    -0x24(%ebp),%eax
 804979a:	85 c0                	test   %eax,%eax
 804979c:	75 79                	jne    8049817 <void comparar<int>(int const&, char const*)+0x1b7>
 804979e:	83 c4 2c             	add    $0x2c,%esp
 80497a1:	5b                   	pop    %ebx
 80497a2:	5e                   	pop    %esi
 80497a3:	5f                   	pop    %edi
 80497a4:	5d                   	pop    %ebp
 80497a5:	c3                   	ret    
 80497a6:	66 90                	xchg   %ax,%ax
 80497a8:	8b 10                	mov    (%eax),%edx
 80497aa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 80497ad:	89 04 24             	mov    %eax,(%esp)
 80497b0:	ff 52 08             	call   *0x8(%edx)
 80497b3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 80497b6:	b9 b0 8c 04 08       	mov    $0x8048cb0,%ecx
 80497bb:	85 c9                	test   %ecx,%ecx
 80497bd:	8d 50 08             	lea    0x8(%eax),%edx
 80497c0:	0f 84 82 00 00 00    	je     8049848 <void comparar<int>(int const&, char const*)+0x1e8>
 80497c6:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 80497cb:	f0 0f c1 0a          	lock xadd %ecx,(%edx)
 80497cf:	89 ca                	mov    %ecx,%edx
 80497d1:	83 fa 01             	cmp    $0x1,%edx
 80497d4:	0f 85 36 ff ff ff    	jne    8049710 <void comparar<int>(int const&, char const*)+0xb0>
 80497da:	8b 10                	mov    (%eax),%edx
 80497dc:	89 04 24             	mov    %eax,(%esp)
 80497df:	ff 52 0c             	call   *0xc(%edx)
 80497e2:	e9 29 ff ff ff       	jmp    8049710 <void comparar<int>(int const&, char const*)+0xb0>
 80497e7:	90                   	nop
 80497e8:	a1 80 c1 04 08       	mov    0x804c180,%eax
 80497ed:	8b 50 f4             	mov    -0xc(%eax),%edx
 80497f0:	81 c2 80 c1 04 08    	add    $0x804c180,%edx
 80497f6:	8b 42 14             	mov    0x14(%edx),%eax
 80497f9:	89 14 24             	mov    %edx,(%esp)
 80497fc:	83 c8 01             	or     $0x1,%eax
 80497ff:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049803:	e8 88 f4 ff ff       	call   8048c90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
 8049808:	e9 43 ff ff ff       	jmp    8049750 <void comparar<int>(int const&, char const*)+0xf0>
 804980d:	8d 76 00             	lea    0x0(%esi),%esi
 8049810:	31 c0                	xor    %eax,%eax
 8049812:	e9 b8 fe ff ff       	jmp    80496cf <void comparar<int>(int const&, char const*)+0x6f>
 8049817:	89 f6                	mov    %esi,%esi
 8049819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
 8049820:	e8 2b f4 ff ff       	call   8048c50 <std::terminate()@plt>
 8049825:	e8 a6 f6 ff ff       	call   8048ed0 <explotar()>
 804982a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 804982e:	75 e7                	jne    8049817 <void comparar<int>(int const&, char const*)+0x1b7>
 8049830:	89 04 24             	mov    %eax,(%esp)
 8049833:	e8 98 f4 ff ff       	call   8048cd0 <_Unwind_Resume@plt>
 8049838:	8b 50 04             	mov    0x4(%eax),%edx
 804983b:	8d 4a ff             	lea    -0x1(%edx),%ecx
 804983e:	89 48 04             	mov    %ecx,0x4(%eax)
 8049841:	89 d1                	mov    %edx,%ecx
 8049843:	e9 bf fe ff ff       	jmp    8049707 <void comparar<int>(int const&, char const*)+0xa7>
 8049848:	8b 50 08             	mov    0x8(%eax),%edx
 804984b:	8d 4a ff             	lea    -0x1(%edx),%ecx
 804984e:	89 48 08             	mov    %ecx,0x8(%eax)
 8049851:	e9 7b ff ff ff       	jmp    80497d1 <void comparar<int>(int const&, char const*)+0x171>
 8049856:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8049859:	89 c3                	mov    %eax,%ebx
 804985b:	85 d2                	test   %edx,%edx
 804985d:	74 08                	je     8049867 <void comparar<int>(int const&, char const*)+0x207>
 804985f:	89 14 24             	mov    %edx,(%esp)
 8049862:	e8 79 fd ff ff       	call   80495e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
 8049867:	89 1c 24             	mov    %ebx,(%esp)
 804986a:	e8 61 f4 ff ff       	call   8048cd0 <_Unwind_Resume@plt>
 804986f:	90                   	nop

08049870 <void comparar<std::string>(std::string const&, char const*)>:
 8049870:	55                   	push   %ebp
 8049871:	89 e5                	mov    %esp,%ebp
 8049873:	57                   	push   %edi
 8049874:	56                   	push   %esi
 8049875:	53                   	push   %ebx
 8049876:	83 ec 2c             	sub    $0x2c,%esp
 8049879:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 804987c:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
 8049883:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
 804988a:	e8 e1 f3 ff ff       	call   8048c70 <operator new(unsigned int)@plt>
 804988f:	85 c0                	test   %eax,%eax
 8049891:	89 c6                	mov    %eax,%esi
 8049893:	0f 84 97 01 00 00    	je     8049a30 <void comparar<std::string>(std::string const&, char const*)+0x1c0>
 8049899:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
 80498a0:	8d 40 10             	lea    0x10(%eax),%eax
 80498a3:	c7 40 f8 01 00 00 00 	movl   $0x1,-0x8(%eax)
 80498aa:	c7 40 f0 78 9f 04 08 	movl   $0x8049f78,-0x10(%eax)
 80498b1:	89 46 0c             	mov    %eax,0xc(%esi)
 80498b4:	8d 45 da             	lea    -0x26(%ebp),%eax
 80498b7:	c7 46 14 00 00 00 00 	movl   $0x0,0x14(%esi)
 80498be:	c7 46 18 00 00 00 00 	movl   $0x0,0x18(%esi)
 80498c5:	c7 46 10 48 9f 04 08 	movl   $0x8049f48,0x10(%esi)
 80498cc:	89 46 1c             	mov    %eax,0x1c(%esi)
 80498cf:	c7 44 24 04 a4 9d 04 	movl   $0x8049da4,0x4(%esp)
 80498d6:	08 
 80498d7:	89 34 24             	mov    %esi,(%esp)
 80498da:	e8 01 f8 ff ff       	call   80490e0 <std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, std::allocator<std::_Bind_simple<void comparar<std::string>(std::string const&, char const*)::{lambda()#1} ()> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)>
 80498df:	89 75 e4             	mov    %esi,-0x1c(%ebp)
 80498e2:	8d 7d dc             	lea    -0x24(%ebp),%edi
 80498e5:	8d 75 e0             	lea    -0x20(%ebp),%esi
 80498e8:	89 74 24 04          	mov    %esi,0x4(%esp)
 80498ec:	89 3c 24             	mov    %edi,(%esp)
 80498ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80498f2:	e8 d9 f2 ff ff       	call   8048bd0 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)@plt>
 80498f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 80498fa:	85 c0                	test   %eax,%eax
 80498fc:	74 22                	je     8049920 <void comparar<std::string>(std::string const&, char const*)+0xb0>
 80498fe:	b9 b0 8c 04 08       	mov    $0x8048cb0,%ecx
 8049903:	85 c9                	test   %ecx,%ecx
 8049905:	8d 50 04             	lea    0x4(%eax),%edx
 8049908:	0f 84 aa 01 00 00    	je     8049ab8 <void comparar<std::string>(std::string const&, char const*)+0x248>
 804990e:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049913:	f0 0f c1 0a          	lock xadd %ecx,(%edx)
 8049917:	83 f9 01             	cmp    $0x1,%ecx
 804991a:	0f 84 d0 00 00 00    	je     80499f0 <void comparar<std::string>(std::string const&, char const*)+0x180>
 8049920:	c7 44 24 08 0b 00 00 	movl   $0xb,0x8(%esp)
 8049927:	00 
 8049928:	c7 44 24 04 2f 9c 04 	movl   $0x8049c2f,0x4(%esp)
 804992f:	08 
 8049930:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8049937:	e8 b4 f3 ff ff       	call   8048cf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)@plt>
 804993c:	85 db                	test   %ebx,%ebx
 804993e:	0f 84 f4 00 00 00    	je     8049a38 <void comparar<std::string>(std::string const&, char const*)+0x1c8>
 8049944:	89 1c 24             	mov    %ebx,(%esp)
 8049947:	e8 d4 f2 ff ff       	call   8048c20 <strlen@plt>
 804994c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 8049950:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8049957:	89 44 24 08          	mov    %eax,0x8(%esp)
 804995b:	e8 90 f3 ff ff       	call   8048cf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)@plt>
 8049960:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
 8049967:	00 
 8049968:	c7 44 24 04 2c 9c 04 	movl   $0x8049c2c,0x4(%esp)
 804996f:	08 
 8049970:	c7 04 24 80 c1 04 08 	movl   $0x804c180,(%esp)
 8049977:	e8 74 f3 ff ff       	call   8048cf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, int)@plt>
 804997c:	89 74 24 04          	mov    %esi,0x4(%esp)
 8049980:	c7 04 24 a0 c0 04 08 	movl   $0x804c0a0,(%esp)
 8049987:	c7 45 e0 6c c2 04 08 	movl   $0x804c26c,-0x20(%ebp)
 804998e:	e8 6d f2 ff ff       	call   8048c00 <std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&)@plt>
 8049993:	8b 55 08             	mov    0x8(%ebp),%edx
 8049996:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8049999:	8b 12                	mov    (%edx),%edx
 804999b:	8b 48 f4             	mov    -0xc(%eax),%ecx
 804999e:	3b 4a f4             	cmp    -0xc(%edx),%ecx
 80499a1:	74 05                	je     80499a8 <void comparar<std::string>(std::string const&, char const*)+0x138>
 80499a3:	e8 28 f5 ff ff       	call   8048ed0 <explotar()>
 80499a8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
 80499ac:	89 54 24 04          	mov    %edx,0x4(%esp)
 80499b0:	89 04 24             	mov    %eax,(%esp)
 80499b3:	e8 98 f1 ff ff       	call   8048b50 <memcmp@plt>
 80499b8:	85 c0                	test   %eax,%eax
 80499ba:	75 e7                	jne    80499a3 <void comparar<std::string>(std::string const&, char const*)+0x133>
 80499bc:	86 45 da             	xchg   %al,-0x26(%ebp)
 80499bf:	89 3c 24             	mov    %edi,(%esp)
 80499c2:	e8 79 f2 ff ff       	call   8048c40 <std::thread::join()@plt>
 80499c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
 80499ca:	8d 50 f4             	lea    -0xc(%eax),%edx
 80499cd:	81 fa 60 c2 04 08    	cmp    $0x804c260,%edx
 80499d3:	0f 85 b0 00 00 00    	jne    8049a89 <void comparar<std::string>(std::string const&, char const*)+0x219>
 80499d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
 80499dc:	85 c0                	test   %eax,%eax
 80499de:	0f 85 a0 00 00 00    	jne    8049a84 <void comparar<std::string>(std::string const&, char const*)+0x214>
 80499e4:	83 c4 2c             	add    $0x2c,%esp
 80499e7:	5b                   	pop    %ebx
 80499e8:	5e                   	pop    %esi
 80499e9:	5f                   	pop    %edi
 80499ea:	5d                   	pop    %ebp
 80499eb:	c3                   	ret    
 80499ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80499f0:	8b 10                	mov    (%eax),%edx
 80499f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 80499f5:	89 04 24             	mov    %eax,(%esp)
 80499f8:	ff 52 08             	call   *0x8(%edx)
 80499fb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
 80499fe:	b9 b0 8c 04 08       	mov    $0x8048cb0,%ecx
 8049a03:	85 c9                	test   %ecx,%ecx
 8049a05:	8d 50 08             	lea    0x8(%eax),%edx
 8049a08:	0f 84 ba 00 00 00    	je     8049ac8 <void comparar<std::string>(std::string const&, char const*)+0x258>
 8049a0e:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
 8049a13:	f0 0f c1 0a          	lock xadd %ecx,(%edx)
 8049a17:	89 ca                	mov    %ecx,%edx
 8049a19:	83 fa 01             	cmp    $0x1,%edx
 8049a1c:	0f 85 fe fe ff ff    	jne    8049920 <void comparar<std::string>(std::string const&, char const*)+0xb0>
 8049a22:	8b 10                	mov    (%eax),%edx
 8049a24:	89 04 24             	mov    %eax,(%esp)
 8049a27:	ff 52 0c             	call   *0xc(%edx)
 8049a2a:	e9 f1 fe ff ff       	jmp    8049920 <void comparar<std::string>(std::string const&, char const*)+0xb0>
 8049a2f:	90                   	nop
 8049a30:	31 c0                	xor    %eax,%eax
 8049a32:	e9 a8 fe ff ff       	jmp    80498df <void comparar<std::string>(std::string const&, char const*)+0x6f>
 8049a37:	90                   	nop
 8049a38:	a1 80 c1 04 08       	mov    0x804c180,%eax
 8049a3d:	8b 50 f4             	mov    -0xc(%eax),%edx
 8049a40:	81 c2 80 c1 04 08    	add    $0x804c180,%edx
 8049a46:	8b 42 14             	mov    0x14(%edx),%eax
 8049a49:	89 14 24             	mov    %edx,(%esp)
 8049a4c:	83 c8 01             	or     $0x1,%eax
 8049a4f:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049a53:	e8 38 f2 ff ff       	call   8048c90 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
 8049a58:	e9 03 ff ff ff       	jmp    8049960 <void comparar<std::string>(std::string const&, char const*)+0xf0>
 8049a5d:	89 c3                	mov    %eax,%ebx
 8049a5f:	8d 45 db             	lea    -0x25(%ebp),%eax
 8049a62:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049a66:	8b 45 e0             	mov    -0x20(%ebp),%eax
 8049a69:	83 e8 0c             	sub    $0xc,%eax
 8049a6c:	89 04 24             	mov    %eax,(%esp)
 8049a6f:	e8 1c f1 ff ff       	call   8048b90 <std::string::_Rep::_M_dispose(std::allocator<char> const&)@plt>
 8049a74:	89 d8                	mov    %ebx,%eax
 8049a76:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
 8049a7a:	75 08                	jne    8049a84 <void comparar<std::string>(std::string const&, char const*)+0x214>
 8049a7c:	89 04 24             	mov    %eax,(%esp)
 8049a7f:	e8 4c f2 ff ff       	call   8048cd0 <_Unwind_Resume@plt>
 8049a84:	e8 c7 f1 ff ff       	call   8048c50 <std::terminate()@plt>
 8049a89:	bb b0 8c 04 08       	mov    $0x8048cb0,%ebx
 8049a8e:	85 db                	test   %ebx,%ebx
 8049a90:	8d 48 fc             	lea    -0x4(%eax),%ecx
 8049a93:	74 5c                	je     8049af1 <void comparar<std::string>(std::string const&, char const*)+0x281>
 8049a95:	83 c8 ff             	or     $0xffffffff,%eax
 8049a98:	f0 0f c1 01          	lock xadd %eax,(%ecx)
 8049a9c:	85 c0                	test   %eax,%eax
 8049a9e:	0f 8f 35 ff ff ff    	jg     80499d9 <void comparar<std::string>(std::string const&, char const*)+0x169>
 8049aa4:	8d 45 db             	lea    -0x25(%ebp),%eax
 8049aa7:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049aab:	89 14 24             	mov    %edx,(%esp)
 8049aae:	e8 5d f1 ff ff       	call   8048c10 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>
 8049ab3:	e9 21 ff ff ff       	jmp    80499d9 <void comparar<std::string>(std::string const&, char const*)+0x169>
 8049ab8:	8b 50 04             	mov    0x4(%eax),%edx
 8049abb:	8d 4a ff             	lea    -0x1(%edx),%ecx
 8049abe:	89 48 04             	mov    %ecx,0x4(%eax)
 8049ac1:	89 d1                	mov    %edx,%ecx
 8049ac3:	e9 4f fe ff ff       	jmp    8049917 <void comparar<std::string>(std::string const&, char const*)+0xa7>
 8049ac8:	8b 50 08             	mov    0x8(%eax),%edx
 8049acb:	8d 4a ff             	lea    -0x1(%edx),%ecx
 8049ace:	89 48 08             	mov    %ecx,0x8(%eax)
 8049ad1:	e9 43 ff ff ff       	jmp    8049a19 <void comparar<std::string>(std::string const&, char const*)+0x1a9>
 8049ad6:	eb 9e                	jmp    8049a76 <void comparar<std::string>(std::string const&, char const*)+0x206>
 8049ad8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 8049adb:	89 c3                	mov    %eax,%ebx
 8049add:	85 d2                	test   %edx,%edx
 8049adf:	74 08                	je     8049ae9 <void comparar<std::string>(std::string const&, char const*)+0x279>
 8049ae1:	89 14 24             	mov    %edx,(%esp)
 8049ae4:	e8 f7 fa ff ff       	call   80495e0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()>
 8049ae9:	89 1c 24             	mov    %ebx,(%esp)
 8049aec:	e8 df f1 ff ff       	call   8048cd0 <_Unwind_Resume@plt>
 8049af1:	8b 48 fc             	mov    -0x4(%eax),%ecx
 8049af4:	8d 59 ff             	lea    -0x1(%ecx),%ebx
 8049af7:	89 58 fc             	mov    %ebx,-0x4(%eax)
 8049afa:	89 c8                	mov    %ecx,%eax
 8049afc:	eb 9e                	jmp    8049a9c <void comparar<std::string>(std::string const&, char const*)+0x22c>
 8049afe:	66 90                	xchg   %ax,%ax

08049b00 <__libc_csu_init>:
 8049b00:	55                   	push   %ebp
 8049b01:	57                   	push   %edi
 8049b02:	31 ff                	xor    %edi,%edi
 8049b04:	56                   	push   %esi
 8049b05:	53                   	push   %ebx
 8049b06:	e8 f5 f2 ff ff       	call   8048e00 <__x86.get_pc_thunk.bx>
 8049b0b:	81 c3 f5 24 00 00    	add    $0x24f5,%ebx
 8049b11:	83 ec 1c             	sub    $0x1c,%esp
 8049b14:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8049b18:	8d b3 ec fe ff ff    	lea    -0x114(%ebx),%esi
 8049b1e:	e8 e1 ef ff ff       	call   8048b04 <_init>
 8049b23:	8d 83 e4 fe ff ff    	lea    -0x11c(%ebx),%eax
 8049b29:	29 c6                	sub    %eax,%esi
 8049b2b:	c1 fe 02             	sar    $0x2,%esi
 8049b2e:	85 f6                	test   %esi,%esi
 8049b30:	74 27                	je     8049b59 <__libc_csu_init+0x59>
 8049b32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8049b38:	8b 44 24 38          	mov    0x38(%esp),%eax
 8049b3c:	89 2c 24             	mov    %ebp,(%esp)
 8049b3f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8049b43:	8b 44 24 34          	mov    0x34(%esp),%eax
 8049b47:	89 44 24 04          	mov    %eax,0x4(%esp)
 8049b4b:	ff 94 bb e4 fe ff ff 	call   *-0x11c(%ebx,%edi,4)
 8049b52:	83 c7 01             	add    $0x1,%edi
 8049b55:	39 f7                	cmp    %esi,%edi
 8049b57:	75 df                	jne    8049b38 <__libc_csu_init+0x38>
 8049b59:	83 c4 1c             	add    $0x1c,%esp
 8049b5c:	5b                   	pop    %ebx
 8049b5d:	5e                   	pop    %esi
 8049b5e:	5f                   	pop    %edi
 8049b5f:	5d                   	pop    %ebp
 8049b60:	c3                   	ret    
 8049b61:	eb 0d                	jmp    8049b70 <__libc_csu_fini>
 8049b63:	90                   	nop
 8049b64:	90                   	nop
 8049b65:	90                   	nop
 8049b66:	90                   	nop
 8049b67:	90                   	nop
 8049b68:	90                   	nop
 8049b69:	90                   	nop
 8049b6a:	90                   	nop
 8049b6b:	90                   	nop
 8049b6c:	90                   	nop
 8049b6d:	90                   	nop
 8049b6e:	90                   	nop
 8049b6f:	90                   	nop

08049b70 <__libc_csu_fini>:
 8049b70:	f3 c3                	repz ret 

Desensamblado de la sección .fini:

08049b74 <_fini>:
 8049b74:	53                   	push   %ebx
 8049b75:	83 ec 08             	sub    $0x8,%esp
 8049b78:	e8 83 f2 ff ff       	call   8048e00 <__x86.get_pc_thunk.bx>
 8049b7d:	81 c3 83 24 00 00    	add    $0x2483,%ebx
 8049b83:	83 c4 08             	add    $0x8,%esp
 8049b86:	5b                   	pop    %ebx
 8049b87:	c3                   	ret    
