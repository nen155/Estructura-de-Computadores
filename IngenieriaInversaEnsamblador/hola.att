
hola:     formato del fichero elf32-i386


Desensamblado de la sección .init:

080484f4 <_init>:
 80484f4:	53                   	push   %ebx
 80484f5:	83 ec 08             	sub    $0x8,%esp
 80484f8:	e8 33 01 00 00       	call   8048630 <__x86.get_pc_thunk.bx>
 80484fd:	81 c3 03 1b 00 00    	add    $0x1b03,%ebx
 8048503:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048509:	85 c0                	test   %eax,%eax
 804850b:	74 05                	je     8048512 <_init+0x1e>
 804850d:	e8 2e 00 00 00       	call   8048540 <__gmon_start__@plt>
 8048512:	83 c4 08             	add    $0x8,%esp
 8048515:	5b                   	pop    %ebx
 8048516:	c3                   	ret    

Desensamblado de la sección .plt:

08048520 <__cxa_atexit@plt-0x10>:
 8048520:	ff 35 04 a0 04 08    	pushl  0x804a004
 8048526:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804852c:	00 00                	add    %al,(%eax)
	...

08048530 <__cxa_atexit@plt>:
 8048530:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 8048536:	68 00 00 00 00       	push   $0x0
 804853b:	e9 e0 ff ff ff       	jmp    8048520 <_init+0x2c>

08048540 <__gmon_start__@plt>:
 8048540:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048546:	68 08 00 00 00       	push   $0x8
 804854b:	e9 d0 ff ff ff       	jmp    8048520 <_init+0x2c>

08048550 <std::ios_base::Init::Init()@plt>:
 8048550:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048556:	68 10 00 00 00       	push   $0x10
 804855b:	e9 c0 ff ff ff       	jmp    8048520 <_init+0x2c>

08048560 <__libc_start_main@plt>:
 8048560:	ff 25 18 a0 04 08    	jmp    *0x804a018
 8048566:	68 18 00 00 00       	push   $0x18
 804856b:	e9 b0 ff ff ff       	jmp    8048520 <_init+0x2c>

08048570 <std::ios_base::Init::~Init()@plt>:
 8048570:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 8048576:	68 20 00 00 00       	push   $0x20
 804857b:	e9 a0 ff ff ff       	jmp    8048520 <_init+0x2c>

08048580 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
 8048580:	ff 25 20 a0 04 08    	jmp    *0x804a020
 8048586:	68 28 00 00 00       	push   $0x28
 804858b:	e9 90 ff ff ff       	jmp    8048520 <_init+0x2c>

08048590 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>:
 8048590:	ff 25 24 a0 04 08    	jmp    *0x804a024
 8048596:	68 30 00 00 00       	push   $0x30
 804859b:	e9 80 ff ff ff       	jmp    8048520 <_init+0x2c>

Desensamblado de la sección .text:

080485a0 <main>:
 80485a0:	55                   	push   %ebp
 80485a1:	89 e5                	mov    %esp,%ebp
 80485a3:	83 e4 f0             	and    $0xfffffff0,%esp
 80485a6:	83 ec 10             	sub    $0x10,%esp
 80485a9:	c7 44 24 04 90 87 04 	movl   $0x8048790,0x4(%esp)
 80485b0:	08 
 80485b1:	c7 04 24 40 a0 04 08 	movl   $0x804a040,(%esp)
 80485b8:	e8 c3 ff ff ff       	call   8048580 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
 80485bd:	89 04 24             	mov    %eax,(%esp)
 80485c0:	e8 cb ff ff ff       	call   8048590 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@plt>
 80485c5:	31 c0                	xor    %eax,%eax
 80485c7:	c9                   	leave  
 80485c8:	c3                   	ret    
 80485c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

080485d0 <_GLOBAL__sub_I_main>:
 80485d0:	55                   	push   %ebp
 80485d1:	89 e5                	mov    %esp,%ebp
 80485d3:	83 ec 18             	sub    $0x18,%esp
 80485d6:	c7 04 24 cd a0 04 08 	movl   $0x804a0cd,(%esp)
 80485dd:	e8 6e ff ff ff       	call   8048550 <std::ios_base::Init::Init()@plt>
 80485e2:	c7 44 24 08 2c a0 04 	movl   $0x804a02c,0x8(%esp)
 80485e9:	08 
 80485ea:	c7 44 24 04 cd a0 04 	movl   $0x804a0cd,0x4(%esp)
 80485f1:	08 
 80485f2:	c7 04 24 70 85 04 08 	movl   $0x8048570,(%esp)
 80485f9:	e8 32 ff ff ff       	call   8048530 <__cxa_atexit@plt>
 80485fe:	c9                   	leave  
 80485ff:	c3                   	ret    

08048600 <_start>:
 8048600:	31 ed                	xor    %ebp,%ebp
 8048602:	5e                   	pop    %esi
 8048603:	89 e1                	mov    %esp,%ecx
 8048605:	83 e4 f0             	and    $0xfffffff0,%esp
 8048608:	50                   	push   %eax
 8048609:	54                   	push   %esp
 804860a:	52                   	push   %edx
 804860b:	68 70 87 04 08       	push   $0x8048770
 8048610:	68 00 87 04 08       	push   $0x8048700
 8048615:	51                   	push   %ecx
 8048616:	56                   	push   %esi
 8048617:	68 a0 85 04 08       	push   $0x80485a0
 804861c:	e8 3f ff ff ff       	call   8048560 <__libc_start_main@plt>
 8048621:	f4                   	hlt    
 8048622:	66 90                	xchg   %ax,%ax
 8048624:	66 90                	xchg   %ax,%ax
 8048626:	66 90                	xchg   %ax,%ax
 8048628:	66 90                	xchg   %ax,%ax
 804862a:	66 90                	xchg   %ax,%ax
 804862c:	66 90                	xchg   %ax,%ax
 804862e:	66 90                	xchg   %ax,%ax

08048630 <__x86.get_pc_thunk.bx>:
 8048630:	8b 1c 24             	mov    (%esp),%ebx
 8048633:	c3                   	ret    
 8048634:	66 90                	xchg   %ax,%ax
 8048636:	66 90                	xchg   %ax,%ax
 8048638:	66 90                	xchg   %ax,%ax
 804863a:	66 90                	xchg   %ax,%ax
 804863c:	66 90                	xchg   %ax,%ax
 804863e:	66 90                	xchg   %ax,%ax

08048640 <deregister_tm_clones>:
 8048640:	b8 33 a0 04 08       	mov    $0x804a033,%eax
 8048645:	2d 30 a0 04 08       	sub    $0x804a030,%eax
 804864a:	83 f8 06             	cmp    $0x6,%eax
 804864d:	77 01                	ja     8048650 <deregister_tm_clones+0x10>
 804864f:	c3                   	ret    
 8048650:	b8 00 00 00 00       	mov    $0x0,%eax
 8048655:	85 c0                	test   %eax,%eax
 8048657:	74 f6                	je     804864f <deregister_tm_clones+0xf>
 8048659:	55                   	push   %ebp
 804865a:	89 e5                	mov    %esp,%ebp
 804865c:	83 ec 18             	sub    $0x18,%esp
 804865f:	c7 04 24 30 a0 04 08 	movl   $0x804a030,(%esp)
 8048666:	ff d0                	call   *%eax
 8048668:	c9                   	leave  
 8048669:	c3                   	ret    
 804866a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048670 <register_tm_clones>:
 8048670:	b8 30 a0 04 08       	mov    $0x804a030,%eax
 8048675:	2d 30 a0 04 08       	sub    $0x804a030,%eax
 804867a:	c1 f8 02             	sar    $0x2,%eax
 804867d:	89 c2                	mov    %eax,%edx
 804867f:	c1 ea 1f             	shr    $0x1f,%edx
 8048682:	01 d0                	add    %edx,%eax
 8048684:	d1 f8                	sar    %eax
 8048686:	75 01                	jne    8048689 <register_tm_clones+0x19>
 8048688:	c3                   	ret    
 8048689:	ba 00 00 00 00       	mov    $0x0,%edx
 804868e:	85 d2                	test   %edx,%edx
 8048690:	74 f6                	je     8048688 <register_tm_clones+0x18>
 8048692:	55                   	push   %ebp
 8048693:	89 e5                	mov    %esp,%ebp
 8048695:	83 ec 18             	sub    $0x18,%esp
 8048698:	89 44 24 04          	mov    %eax,0x4(%esp)
 804869c:	c7 04 24 30 a0 04 08 	movl   $0x804a030,(%esp)
 80486a3:	ff d2                	call   *%edx
 80486a5:	c9                   	leave  
 80486a6:	c3                   	ret    
 80486a7:	89 f6                	mov    %esi,%esi
 80486a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080486b0 <__do_global_dtors_aux>:
 80486b0:	80 3d cc a0 04 08 00 	cmpb   $0x0,0x804a0cc
 80486b7:	75 13                	jne    80486cc <__do_global_dtors_aux+0x1c>
 80486b9:	55                   	push   %ebp
 80486ba:	89 e5                	mov    %esp,%ebp
 80486bc:	83 ec 08             	sub    $0x8,%esp
 80486bf:	e8 7c ff ff ff       	call   8048640 <deregister_tm_clones>
 80486c4:	c6 05 cc a0 04 08 01 	movb   $0x1,0x804a0cc
 80486cb:	c9                   	leave  
 80486cc:	f3 c3                	repz ret 
 80486ce:	66 90                	xchg   %ax,%ax

080486d0 <frame_dummy>:
 80486d0:	a1 f0 9e 04 08       	mov    0x8049ef0,%eax
 80486d5:	85 c0                	test   %eax,%eax
 80486d7:	74 1f                	je     80486f8 <frame_dummy+0x28>
 80486d9:	b8 00 00 00 00       	mov    $0x0,%eax
 80486de:	85 c0                	test   %eax,%eax
 80486e0:	74 16                	je     80486f8 <frame_dummy+0x28>
 80486e2:	55                   	push   %ebp
 80486e3:	89 e5                	mov    %esp,%ebp
 80486e5:	83 ec 18             	sub    $0x18,%esp
 80486e8:	c7 04 24 f0 9e 04 08 	movl   $0x8049ef0,(%esp)
 80486ef:	ff d0                	call   *%eax
 80486f1:	c9                   	leave  
 80486f2:	e9 79 ff ff ff       	jmp    8048670 <register_tm_clones>
 80486f7:	90                   	nop
 80486f8:	e9 73 ff ff ff       	jmp    8048670 <register_tm_clones>
 80486fd:	66 90                	xchg   %ax,%ax
 80486ff:	90                   	nop

08048700 <__libc_csu_init>:
 8048700:	55                   	push   %ebp
 8048701:	57                   	push   %edi
 8048702:	31 ff                	xor    %edi,%edi
 8048704:	56                   	push   %esi
 8048705:	53                   	push   %ebx
 8048706:	e8 25 ff ff ff       	call   8048630 <__x86.get_pc_thunk.bx>
 804870b:	81 c3 f5 18 00 00    	add    $0x18f5,%ebx
 8048711:	83 ec 1c             	sub    $0x1c,%esp
 8048714:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048718:	8d b3 ec fe ff ff    	lea    -0x114(%ebx),%esi
 804871e:	e8 d1 fd ff ff       	call   80484f4 <_init>
 8048723:	8d 83 e4 fe ff ff    	lea    -0x11c(%ebx),%eax
 8048729:	29 c6                	sub    %eax,%esi
 804872b:	c1 fe 02             	sar    $0x2,%esi
 804872e:	85 f6                	test   %esi,%esi
 8048730:	74 27                	je     8048759 <__libc_csu_init+0x59>
 8048732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048738:	8b 44 24 38          	mov    0x38(%esp),%eax
 804873c:	89 2c 24             	mov    %ebp,(%esp)
 804873f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048743:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048747:	89 44 24 04          	mov    %eax,0x4(%esp)
 804874b:	ff 94 bb e4 fe ff ff 	call   *-0x11c(%ebx,%edi,4)
 8048752:	83 c7 01             	add    $0x1,%edi
 8048755:	39 f7                	cmp    %esi,%edi
 8048757:	75 df                	jne    8048738 <__libc_csu_init+0x38>
 8048759:	83 c4 1c             	add    $0x1c,%esp
 804875c:	5b                   	pop    %ebx
 804875d:	5e                   	pop    %esi
 804875e:	5f                   	pop    %edi
 804875f:	5d                   	pop    %ebp
 8048760:	c3                   	ret    
 8048761:	eb 0d                	jmp    8048770 <__libc_csu_fini>
 8048763:	90                   	nop
 8048764:	90                   	nop
 8048765:	90                   	nop
 8048766:	90                   	nop
 8048767:	90                   	nop
 8048768:	90                   	nop
 8048769:	90                   	nop
 804876a:	90                   	nop
 804876b:	90                   	nop
 804876c:	90                   	nop
 804876d:	90                   	nop
 804876e:	90                   	nop
 804876f:	90                   	nop

08048770 <__libc_csu_fini>:
 8048770:	f3 c3                	repz ret 

Desensamblado de la sección .fini:

08048774 <_fini>:
 8048774:	53                   	push   %ebx
 8048775:	83 ec 08             	sub    $0x8,%esp
 8048778:	e8 b3 fe ff ff       	call   8048630 <__x86.get_pc_thunk.bx>
 804877d:	81 c3 83 18 00 00    	add    $0x1883,%ebx
 8048783:	83 c4 08             	add    $0x8,%esp
 8048786:	5b                   	pop    %ebx
 8048787:	c3                   	ret    
